"use strict";(self.webpackChunkopenbrush=self.webpackChunkopenbrush||[]).push([[418],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(n),f=a,m=d["".concat(l,".").concat(f)]||d[f]||c[f]||i;return n?r.createElement(m,o(o({ref:t},u),{},{components:n})):r.createElement(m,o({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6980:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return u},default:function(){return d}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],s={sidebar_position:5,title:"Pausable"},l=void 0,p={unversionedId:"smart-contracts/pausable",id:"smart-contracts/pausable",isDocsHomePage:!1,title:"Pausable",description:"This example shows how you can reuse the implementation of",source:"@site/docs/smart-contracts/pausable.md",sourceDirName:"smart-contracts",slug:"/smart-contracts/pausable",permalink:"/openbrush-contracts/smart-contracts/pausable",editUrl:"https://github.com/Supercolony-net/openbrush-contracts/tree/main/docs/smart-contracts/pausable.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,title:"Pausable"},sidebar:"tutorialSidebar",previous:{title:"Reentrancy Guard",permalink:"/openbrush-contracts/smart-contracts/reentrancy-guard"},next:{title:"Payment Splitter",permalink:"/openbrush-contracts/smart-contracts/payment-splitter"}},u=[{value:"Step 1: Include dependencies",id:"step-1-include-dependencies",children:[]},{value:"Step 2: Add imports",id:"step-2-add-imports",children:[]},{value:"Step 3: Define storage",id:"step-3-define-storage",children:[]},{value:"Step 4: Inherit logic",id:"step-4-inherit-logic",children:[]},{value:"Step 5: Define constructor",id:"step-5-define-constructor",children:[]},{value:"Step 6: Customize your contract",id:"step-6-customize-your-contract",children:[]}],c={toc:u};function d(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This example shows how you can reuse the implementation of\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Supercolony-net/openbrush-contracts/tree/main/contracts/security/pausable"},"pausable")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"Flipper")," contract to ",(0,i.kt)("inlineCode",{parentName:"p"},"flip")," only if the contract is not paused."),(0,i.kt)("h2",{id:"step-1-include-dependencies"},"Step 1: Include dependencies"),(0,i.kt)("p",null,"Include dependencies to ",(0,i.kt)("inlineCode",{parentName:"p"},"pausable")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"brush")," in the cargo file."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml"},'[dependencies]\nink_primitives = { tag = "v3.0.0-rc4", git = "https://github.com/Supercolony-net/ink", default-features = false }\nink_metadata = { tag = "v3.0.0-rc4", git = "https://github.com/Supercolony-net/ink", default-features = false, features = ["derive"], optional = true }\nink_env = { tag = "v3.0.0-rc4", git = "https://github.com/Supercolony-net/ink", default-features = false }\nink_storage = { tag = "v3.0.0-rc4", git = "https://github.com/Supercolony-net/ink", default-features = false }\nink_lang = { tag = "v3.0.0-rc4", git = "https://github.com/Supercolony-net/ink", default-features = false }\nink_prelude = { tag = "v3.0.0-rc4", git = "https://github.com/Supercolony-net/ink", default-features = false }\n\nscale = { package = "parity-scale-codec", version = "2.1", default-features = false, features = ["derive"] }\nscale-info = { version = "0.6.0", default-features = false, features = ["derive"], optional = true }\n\n# These dependencies\npausable = { tag = "v1.0.0", git = "https://github.com/Supercolony-net/openbrush-contracts", default-features = false }\nbrush = { tag = "v1.0.0", git = "https://github.com/Supercolony-net/openbrush-contracts", default-features = false }\n\n[features]\ndefault = ["std"]\nstd = [\n   "ink_primitives/std",\n   "ink_metadata",\n   "ink_metadata/std",\n   "ink_env/std",\n   "ink_storage/std",\n   "ink_lang/std",\n   "scale/std",\n   "scale-info",\n   "scale-info/std",\n\n   # These dependencies\n   "pausable/std",\n   "brush/std",\n]\n')),(0,i.kt)("h2",{id:"step-2-add-imports"},"Step 2: Add imports"),(0,i.kt)("p",null,"Replace ",(0,i.kt)("inlineCode",{parentName:"p"},"ink::contract")," macro by ",(0,i.kt)("inlineCode",{parentName:"p"},"brush::contract"),".\nImport ",(0,i.kt)("strong",{parentName:"p"},"everything")," from ",(0,i.kt)("inlineCode",{parentName:"p"},"pausable::traits"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"#[brush::contract]\npub mod my_pausable {\n   use pausable::traits::*;\n")),(0,i.kt)("h2",{id:"step-3-define-storage"},"Step 3: Define storage"),(0,i.kt)("p",null,"Declare storage struct and declare the field related to ",(0,i.kt)("inlineCode",{parentName:"p"},"PausableStorage"),".\nThen you need to derive ",(0,i.kt)("inlineCode",{parentName:"p"},"PausableStorage")," trait and mark corresponding field\nwith ",(0,i.kt)("inlineCode",{parentName:"p"},"#[PausableStorageField]")," attribute. Deriving this trait allows you to reuse\nthe default implementation of ",(0,i.kt)("inlineCode",{parentName:"p"},"Pausable"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"#[ink(storage)]\n#[derive(Default, PausableStorage)]\npub struct MyFlipper {\n   #[PausableStorageField]\n   pause: PausableData,\n   flipped: bool,\n}\n")),(0,i.kt)("h2",{id:"step-4-inherit-logic"},"Step 4: Inherit logic"),(0,i.kt)("p",null,"Inherit the implementation of ",(0,i.kt)("inlineCode",{parentName:"p"},"Pausable"),". You can customize (override) methods in this ",(0,i.kt)("inlineCode",{parentName:"p"},"impl")," block."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"impl Pausable for MyFlipper {}\n")),(0,i.kt)("h2",{id:"step-5-define-constructor"},"Step 5: Define constructor"),(0,i.kt)("p",null,"Define constructor. Your basic version of ",(0,i.kt)("inlineCode",{parentName:"p"},"Pausable")," contract is ready!"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"impl MyFlipper {\n   #[ink(constructor)]\n   pub fn new() -> Self {\n      Self::default()\n   }\n}\n")),(0,i.kt)("h2",{id:"step-6-customize-your-contract"},"Step 6: Customize your contract"),(0,i.kt)("p",null,"Customize it by adding flipper logic. We will implement ",(0,i.kt)("inlineCode",{parentName:"p"},"flip")," method marked with ",(0,i.kt)("inlineCode",{parentName:"p"},"when_not_paused")," modifier."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"impl MyFlipper {\n   #[ink(constructor)]\n   pub fn new() -> Self {\n      Self::default()\n   }\n\n   #[ink(message)]\n   #[brush::modifiers(when_not_paused)]\n   pub fn flip(&mut self) {\n      self.flipped = !self.flipped;\n   }\n\n   #[ink(message)]\n   pub fn pause(&mut self) {\n      self._pause()\n   }\n\n   #[ink(message)]\n   pub fn unpause(&mut self) {\n      self._unpause()\n   }\n}\n\nimpl Pausable for MyFlipper {}\n")))}d.isMDXComponent=!0}}]);