"use strict";(self.webpackChunkopenbrush=self.webpackChunkopenbrush||[]).push([[329],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),l=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=l(n),m=o,f=d["".concat(i,".").concat(m)]||d[m]||u[m]||a;return n?r.createElement(f,s(s({ref:t},p),{},{components:n})):r.createElement(f,s({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=d;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:o,s[1]=c;for(var l=2;l<a;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5799:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return i},metadata:function(){return l},toc:function(){return p},default:function(){return d}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),s=["components"],c={sidebar_position:2,title:"Access Control & PSP721"},i=void 0,l={unversionedId:"smart-contracts/access-control",id:"smart-contracts/access-control",isDocsHomePage:!1,title:"Access Control & PSP721",description:"This example shows how you can use the implementation of",source:"@site/docs/smart-contracts/access-control.md",sourceDirName:"smart-contracts",slug:"/smart-contracts/access-control",permalink:"/openbrush-contracts/smart-contracts/access-control",editUrl:"https://github.com/Supercolony-net/openbrush-contracts/tree/main/docs/smart-contracts/access-control.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Access Control & PSP721"},sidebar:"tutorialSidebar",previous:{title:"PSP22",permalink:"/openbrush-contracts/smart-contracts/psp22"},next:{title:"Ownable & PSP1155",permalink:"/openbrush-contracts/smart-contracts/ownable"}},p=[{value:"Step 1: Include dependencies",id:"step-1-include-dependencies",children:[]},{value:"Step 2: Add imports",id:"step-2-add-imports",children:[]},{value:"Step 3: Define storage",id:"step-3-define-storage",children:[]},{value:"Step 4: Inherit logic",id:"step-4-inherit-logic",children:[]},{value:"Step 5: Define constructor",id:"step-5-define-constructor",children:[]},{value:"Step 6: Customize your contract",id:"step-6-customize-your-contract",children:[]}],u={toc:p};function d(e){var t=e.components,n=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This example shows how you can use the implementation of\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Supercolony-net/openbrush-contracts/tree/main/contracts/access/access-control"},"access-control")," and\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Supercolony-net/openbrush-contracts/tree/main/contracts/token/psp721"},"psp721")," together to provide rights to mint and burn NFT tokens."),(0,a.kt)("h2",{id:"step-1-include-dependencies"},"Step 1: Include dependencies"),(0,a.kt)("p",null,"Include dependencies to ",(0,a.kt)("inlineCode",{parentName:"p"},"psp721"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"access-control")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"brush")," in the cargo file."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-toml"},'[dependencies]\nink_primitives = { tag = "v3.0.0-rc4", git = "https://github.com/Supercolony-net/ink", default-features = false }\nink_metadata = { tag = "v3.0.0-rc4", git = "https://github.com/Supercolony-net/ink", default-features = false, features = ["derive"], optional = true }\nink_env = { tag = "v3.0.0-rc4", git = "https://github.com/Supercolony-net/ink", default-features = false }\nink_storage = { tag = "v3.0.0-rc4", git = "https://github.com/Supercolony-net/ink", default-features = false }\nink_lang = { tag = "v3.0.0-rc4", git = "https://github.com/Supercolony-net/ink", default-features = false }\nink_prelude = { tag = "v3.0.0-rc4", git = "https://github.com/Supercolony-net/ink", default-features = false }\n\nscale = { package = "parity-scale-codec", version = "2.1", default-features = false, features = ["derive"] }\nscale-info = { version = "0.6.0", default-features = false, features = ["derive"], optional = true }\n\n# These dependencies\npsp721 = { tag = "v1.0.0", git = "https://github.com/Supercolony-net/openbrush-contracts", default-features = false }\naccess-control = { tag = "v1.0.0", git = "https://github.com/Supercolony-net/openbrush-contracts", default-features = false }\nbrush = { tag = "v1.0.0", git = "https://github.com/Supercolony-net/openbrush-contracts", default-features = false }\n\n[features]\ndefault = ["std"]\nstd = [\n   # Other features ...\n   \n   "psp721/std",\n   "access-control/std",\n   "brush/std",\n]\n')),(0,a.kt)("h2",{id:"step-2-add-imports"},"Step 2: Add imports"),(0,a.kt)("p",null,"Replace ",(0,a.kt)("inlineCode",{parentName:"p"},"ink::contract")," macro by ",(0,a.kt)("inlineCode",{parentName:"p"},"brush::contract"),". Import ",(0,a.kt)("strong",{parentName:"p"},"everything")," from ",(0,a.kt)("inlineCode",{parentName:"p"},"psp721::traits")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"access_control::traits"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"#[brush::contract]\npub mod my_access_control {\n   use psp721::traits::*;\n   use access_control::traits::*;\n   use brush::modifiers;\n   use ink_prelude::vec::Vec;\n")),(0,a.kt)("h2",{id:"step-3-define-storage"},"Step 3: Define storage"),(0,a.kt)("p",null,"Declare storage struct and declare the fields related to ",(0,a.kt)("inlineCode",{parentName:"p"},"PSP721Storage")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"AccessControlStorage"),"\ntraits. Then you need to derive ",(0,a.kt)("inlineCode",{parentName:"p"},"PSP721Storage")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"AccessControlStorage")," traits and mark corresponding fields\nwith ",(0,a.kt)("inlineCode",{parentName:"p"},"#[PSP721StorageField]")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"#[AccessControlStorageField]")," attributes. Deriving these traits allows you to reuse\nthe default implementation of ",(0,a.kt)("inlineCode",{parentName:"p"},"IPSP721")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"AccessControl"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"#[ink(storage)]\n#[derive(Default, PSP721Storage, AccessControlStorage)]\npub struct PSP721Struct {\n    #[PSP721StorageField]\n    psp721: PSP721Data,\n    #[AccessControlStorageField]\n    access: AccessControlData,\n}\n")),(0,a.kt)("h2",{id:"step-4-inherit-logic"},"Step 4: Inherit logic"),(0,a.kt)("p",null,"Inherit implementations of ",(0,a.kt)("inlineCode",{parentName:"p"},"IPSP721")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"AccessControl")," traits. You can customize (override) methods in this ",(0,a.kt)("inlineCode",{parentName:"p"},"impl")," block."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"impl IPSP721 for PSP721Struct {}\n\nimpl AccessControl for PSP721Struct {}\n")),(0,a.kt)("h2",{id:"step-5-define-constructor"},"Step 5: Define constructor"),(0,a.kt)("p",null,"Define constructor. Your basic version of ",(0,a.kt)("inlineCode",{parentName:"p"},"IPSP721")," contract is ready!"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"impl PSP721Struct {\n    #[ink(constructor)]\n    pub fn new() -> Self {\n        Self::default()\n    }\n}\n")),(0,a.kt)("h2",{id:"step-6-customize-your-contract"},"Step 6: Customize your contract"),(0,a.kt)("p",null,"Customize it by adding access control logic. We will implement ",(0,a.kt)("inlineCode",{parentName:"p"},"IPSP721Mint")," trait. It will use modifier ",(0,a.kt)("inlineCode",{parentName:"p"},"only_minter"),"(it verifies that caller\nhas the minter role). Also, we need to update the constructor to grant the minter role to the caller by default."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'// You can manually set the number for the role. \n// But better to use a hash of the variable name.\n// It will generate a unique identifier of this role.\n// And will reduce the chance to have overlapping roles.\nconst MINTER: RoleType = brush::blake2b_256_as_u32!("MINTER");\n\nimpl PSP721Struct {\n   #[ink(constructor)]\n   pub fn new() -> Self {\n      let mut instance = Self::default();\n      let caller = instance.env().caller();\n      instance._init_with_admin(caller);\n      // We grant minter role to caller in constructor, so he can mint/burn tokens\n      instance.grant_role(MINTER, caller);\n      instance\n   }\n}\n\nimpl IPSP721 for PSP721Struct {}\n\nimpl AccessControl for PSP721Struct {}\n\nimpl IPSP721Mint for PSP721Struct {\n   #[ink(message)]\n   #[modifiers(only_role(MINTER))]\n   fn mint(&mut self, id: Id) {\n      self._mint(id);\n   }\n\n   #[ink(message)]\n   #[modifiers(only_role(MINTER))]\n   fn burn(&mut self, id: Id) {\n      self._burn(id);\n   }\n}\n')))}d.isMDXComponent=!0}}]);