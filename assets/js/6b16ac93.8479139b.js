"use strict";(self.webpackChunkopenbrush=self.webpackChunkopenbrush||[]).push([[286],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),m=c(n),d=a,f=m["".concat(l,".").concat(d)]||m[d]||u[d]||i;return n?r.createElement(f,o(o({ref:t},s),{},{components:n})):r.createElement(f,o({ref:t},s))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:a,o[1]=p;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},615:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return p},metadata:function(){return c},toc:function(){return s}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],p={sidebar_position:7,title:"Payment Splitter"},l=void 0,c={unversionedId:"smart-contracts/payment-splitter",id:"smart-contracts/payment-splitter",isDocsHomePage:!1,title:"Payment Splitter",description:"This example shows how you can reuse the implementation of",source:"@site/docs/smart-contracts/payment-splitter.md",sourceDirName:"smart-contracts",slug:"/smart-contracts/payment-splitter",permalink:"/smart-contracts/payment-splitter",editUrl:"https://github.com/Supercolony-net/openbrush-contracts/tree/main/docs/docs/smart-contracts/payment-splitter.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7,title:"Payment Splitter"},sidebar:"tutorialSidebar",previous:{title:"Pausable",permalink:"/smart-contracts/pausable"},next:{title:"Timelock Controller",permalink:"/smart-contracts/timelock-controller"}},s=[{value:"Step 1: Include dependencies",id:"step-1-include-dependencies",children:[]},{value:"Step 2: Add imports and enable unstable feature",id:"step-2-add-imports-and-enable-unstable-feature",children:[]},{value:"Step 3: Define storage",id:"step-3-define-storage",children:[]},{value:"Step 4: Inherit logic",id:"step-4-inherit-logic",children:[]},{value:"Step 5: Define constructor",id:"step-5-define-constructor",children:[]}],u={toc:s};function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This example shows how you can reuse the implementation of\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Supercolony-net/openbrush-contracts/tree/main/contracts/finance/payment_splitter"},"payment-splitter"),"."),(0,i.kt)("h2",{id:"step-1-include-dependencies"},"Step 1: Include dependencies"),(0,i.kt)("p",null,"Include ",(0,i.kt)("inlineCode",{parentName:"p"},"brush")," as dependency in the cargo file or you can use ",(0,i.kt)("a",{parentName:"p",href:"/smart-contracts/overview#the-default-toml-of-your-project-with-openbrush"},"default ",(0,i.kt)("inlineCode",{parentName:"a"},"Cargo.toml"))," template.\nAfter you need to enable default implementation of Payment Splitter via ",(0,i.kt)("inlineCode",{parentName:"p"},"brush")," features."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml"},'brush = { tag = "v1.5.0", git = "https://github.com/Supercolony-net/openbrush-contracts", default-features = false, features = ["payment_splitter"] }\n\n# payment-splitter uses dividing inside, so your version of rust can require you to disable check overflow.\n[profile.dev]\n')),(0,i.kt)("h2",{id:"step-2-add-imports-and-enable-unstable-feature"},"Step 2: Add imports and enable unstable feature"),(0,i.kt)("p",null,"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"brush::contract")," macro instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"ink::contract"),". Import ",(0,i.kt)("strong",{parentName:"p"},"everything")," from ",(0,i.kt)("inlineCode",{parentName:"p"},"brush::contracts::payment_splitter"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'#![cfg_attr(not(feature = "std"), no_std)]\n#![feature(min_specialization)]\n\n#[brush::contract]\npub mod my_payment_splitter {\n    use brush::contracts::payment_splitter::*;\n    use ink_prelude::vec::Vec;\n    use ink_storage::traits::SpreadAllocate;\n')),(0,i.kt)("h2",{id:"step-3-define-storage"},"Step 3: Define storage"),(0,i.kt)("p",null,"Declare storage struct and declare the field related to ",(0,i.kt)("inlineCode",{parentName:"p"},"PaymentSplitterStorage"),"\nThen you need to derive ",(0,i.kt)("inlineCode",{parentName:"p"},"PaymentSplitterStorage")," trait and mark corresponding field\nwith ",(0,i.kt)("inlineCode",{parentName:"p"},"#[PaymentSplitterStorageField]")," attribute. Deriving this trait allows you to reuse\nthe default implementation of ",(0,i.kt)("inlineCode",{parentName:"p"},"PaymentSplitter"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"#[ink(storage)]\n#[derive(Default, SpreadAllocate, PaymentSplitterStorage)]\npub struct SplitterStruct {\n   #[PaymentSplitterStorageField]\n   splitter: PaymentSplitterData,\n}\n")),(0,i.kt)("h2",{id:"step-4-inherit-logic"},"Step 4: Inherit logic"),(0,i.kt)("p",null,"Inherit the implementation of ",(0,i.kt)("inlineCode",{parentName:"p"},"PaymentSplitter"),". You can customize (override) methods in this ",(0,i.kt)("inlineCode",{parentName:"p"},"impl")," block."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"impl PaymentSplitter for SplitterStruct {}\n")),(0,i.kt)("h2",{id:"step-5-define-constructor"},"Step 5: Define constructor"),(0,i.kt)("p",null,"Define constructor. Your basic version of ",(0,i.kt)("inlineCode",{parentName:"p"},"PaymentSplitter")," contract is ready!"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'impl SplitterStruct {\n   #[ink(constructor)]\n   pub fn new(payees_and_shares: Vec<(AccountId, Balance)>) -> Self {\n      ink_lang::codegen::initialize_contract(|instance: &mut Self| {\n         instance._init(payees_and_shares).expect("Should init");\n      })\n   }\n}\n')),(0,i.kt)("p",null,"You can check an example of the usage of ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Supercolony-net/openbrush-contracts/tree/main/examples/payment_splitter"},"PaymentSplitter"),"."))}m.isMDXComponent=!0}}]);