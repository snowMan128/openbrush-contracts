"use strict";(self.webpackChunkopenbrush=self.webpackChunkopenbrush||[]).push([[162],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return m}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function u(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),d=c(r),m=o,h=d["".concat(s,".").concat(m)]||d[m]||l[m]||a;return r?n.createElement(h,i(i({ref:t},p),{},{components:r})):n.createElement(h,i({ref:t},p))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=d;var u={};for(var s in t)hasOwnProperty.call(t,s)&&(u[s]=t[s]);u.originalType=e,u.mdxType="string"==typeof e?e:o,i[1]=u;for(var c=2;c<a;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},9390:function(e,t,r){r.r(t),r.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return u},metadata:function(){return c},toc:function(){return l}});var n=r(7462),o=r(3366),a=(r(7294),r(3905)),i=["components"],u={sidebar_position:1,slug:"/",title:"OpenBrush documentation",sidebar_label:"Getting started"},s=void 0,c={unversionedId:"getting-started",id:"getting-started",title:"OpenBrush documentation",description:"Welcome to OpenBrush documentation! This documentation aims to guide you through the usage of OpenBrush library.",source:"@site/docs/getting-started.md",sourceDirName:".",slug:"/",permalink:"/",draft:!1,editUrl:"https://github.com/Supercolony-net/openbrush-contracts/tree/main/docs/docs/getting-started.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,slug:"/",title:"OpenBrush documentation",sidebar_label:"Getting started"},sidebar:"tutorialSidebar",next:{title:"Overview",permalink:"/smart-contracts/overview"}},p={},l=[{value:"What is OpenBrush",id:"what-is-openbrush",level:2},{value:"Why OpenBrush",id:"why-openbrush",level:2}],d={toc:l};function m(e){var t=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Welcome to OpenBrush documentation! This documentation aims to guide you through the usage of OpenBrush library."),(0,a.kt)("h2",{id:"what-is-openbrush"},"What is OpenBrush"),(0,a.kt)("p",null,"OpenBrush is a library for smart contract development on ink!\nIt provides standard contracts (",(0,a.kt)("a",{parentName:"p",href:"https://github.com/w3f/PSPs"},"based on PSP"),"), as well as useful contracts and macros to help you build ink! smart contracts."),(0,a.kt)("h2",{id:"why-openbrush"},"Why OpenBrush"),(0,a.kt)("p",null,"OpenBrush attempts to analogize OpenZeppelin perfectly with Rust\u2019s paradigm, enabling users to import contracts implemented by another user without problems and reuse the code.\nThere was a need to have a library that can provide base implementations of ERCs and to import/reuse them by customizing their own logic."))}m.isMDXComponent=!0}}]);