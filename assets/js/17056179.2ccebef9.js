"use strict";(self.webpackChunkopenbrush=self.webpackChunkopenbrush||[]).push([[772],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(n),m=a,f=d["".concat(c,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9053:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return p},default:function(){return d}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],s={sidebar_position:3,title:"Ownable & PSP1155"},c=void 0,l={unversionedId:"smart-contracts/ownable",id:"smart-contracts/ownable",isDocsHomePage:!1,title:"Ownable & PSP1155",description:"This example shows how you can use the implementation of",source:"@site/docs/smart-contracts/ownable.md",sourceDirName:"smart-contracts",slug:"/smart-contracts/ownable",permalink:"/openbrush-contracts/smart-contracts/ownable",editUrl:"https://github.com/Supercolony-net/openbrush-contracts/tree/main/docs/smart-contracts/ownable.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Ownable & PSP1155"},sidebar:"tutorialSidebar",previous:{title:"Access Control & PSP721",permalink:"/openbrush-contracts/smart-contracts/access-control"},next:{title:"Reentrancy Guard",permalink:"/openbrush-contracts/smart-contracts/reentrancy-guard"}},p=[{value:"Step 1: Include dependencies",id:"step-1-include-dependencies",children:[]},{value:"Step 2: Add imports",id:"step-2-add-imports",children:[]},{value:"Step 3: Define storage",id:"step-3-define-storage",children:[]},{value:"Step 4: Inherit logic",id:"step-4-inherit-logic",children:[]},{value:"Step 5: Define constructor",id:"step-5-define-constructor",children:[]},{value:"Step 6: Customize your contract",id:"step-6-customize-your-contract",children:[]}],u={toc:p};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This example shows how you can use the implementation of\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Supercolony-net/openbrush-contracts/tree/main/contracts/access/ownable"},"access-control")," and\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Supercolony-net/openbrush-contracts/tree/main/contracts/token/psp1155"},"psp1155")," together to provide ",(0,o.kt)("inlineCode",{parentName:"p"},"only owner")," rights to mint and burn tokens."),(0,o.kt)("h2",{id:"step-1-include-dependencies"},"Step 1: Include dependencies"),(0,o.kt)("p",null,"Include dependencies to ",(0,o.kt)("inlineCode",{parentName:"p"},"psp1155"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"ownable")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"brush")," in the cargo file."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-toml"},'[dependencies]\nink_primitives = { tag = "v3.0.0-rc4", git = "https://github.com/Supercolony-net/ink", default-features = false }\nink_metadata = { tag = "v3.0.0-rc4", git = "https://github.com/Supercolony-net/ink", default-features = false, features = ["derive"], optional = true }\nink_env = { tag = "v3.0.0-rc4", git = "https://github.com/Supercolony-net/ink", default-features = false }\nink_storage = { tag = "v3.0.0-rc4", git = "https://github.com/Supercolony-net/ink", default-features = false }\nink_lang = { tag = "v3.0.0-rc4", git = "https://github.com/Supercolony-net/ink", default-features = false }\nink_prelude = { tag = "v3.0.0-rc4", git = "https://github.com/Supercolony-net/ink", default-features = false }\n\nscale = { package = "parity-scale-codec", version = "2.1", default-features = false, features = ["derive"] }\nscale-info = { version = "0.6.0", default-features = false, features = ["derive"], optional = true }\n\n# These dependencies\npsp1155 = { tag = "v1.0.0", git = "https://github.com/Supercolony-net/openbrush-contracts", default-features = false }\nownable = { tag = "v1.0.0", git = "https://github.com/Supercolony-net/openbrush-contracts", default-features = false }\nbrush = { tag = "v1.0.0", git = "https://github.com/Supercolony-net/openbrush-contracts", default-features = false }\n\n[features]\ndefault = ["std"]\nstd = [\n   "ink_primitives/std",\n   "ink_metadata",\n   "ink_metadata/std",\n   "ink_env/std",\n   "ink_storage/std",\n   "ink_lang/std",\n   "scale/std",\n   "scale-info",\n   "scale-info/std",\n\n   # These dependencies   \n   "psp1155/std",\n   "ownable/std",\n   "brush/std",\n]\n')),(0,o.kt)("h2",{id:"step-2-add-imports"},"Step 2: Add imports"),(0,o.kt)("p",null,"Replace ",(0,o.kt)("inlineCode",{parentName:"p"},"ink::contract")," macro by ",(0,o.kt)("inlineCode",{parentName:"p"},"brush::contract"),".\nImport ",(0,o.kt)("strong",{parentName:"p"},"everything")," from ",(0,o.kt)("inlineCode",{parentName:"p"},"psp1155::traits")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"ownable::traits"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"#[brush::contract]\npub mod ownable {\n   use psp1155::traits::*;\n   use ownable::traits::*;\n   use brush::modifiers;\n   use ink_prelude::vec::Vec;\n")),(0,o.kt)("h2",{id:"step-3-define-storage"},"Step 3: Define storage"),(0,o.kt)("p",null,"Declare storage struct and declare the fields related to ",(0,o.kt)("inlineCode",{parentName:"p"},"PSP1155Storage")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"OwnableStorage"),"\ntraits. Then you need to derive ",(0,o.kt)("inlineCode",{parentName:"p"},"PSP1155Storage")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"OwnableStorage")," traits and mark corresponding fields\nwith ",(0,o.kt)("inlineCode",{parentName:"p"},"#[PSP1155StorageField]")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"#[OwnableStorageField]")," attributes. Deriving these traits allows you to reuse the\ndefault implementation of ",(0,o.kt)("inlineCode",{parentName:"p"},"IPSP1155")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Ownable"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"#[ink(storage)]\n#[derive(Default, PSP1155Storage, OwnableStorage)]\npub struct PSP1155Struct {\n    #[PSP1155StorageField]\n    psp1155: PSP1155Data,\n    #[OwnableStorageField]\n    ownale: OwnableData,\n}\n")),(0,o.kt)("h2",{id:"step-4-inherit-logic"},"Step 4: Inherit logic"),(0,o.kt)("p",null,"Inherit implementations of ",(0,o.kt)("inlineCode",{parentName:"p"},"IPSP1155")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Ownable")," traits. You can customize (override) methods in this ",(0,o.kt)("inlineCode",{parentName:"p"},"impl")," block."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"impl Ownable for PSP1155Struct {}\nimpl IPSP1155 for PSP1155Struct {}\n")),(0,o.kt)("h2",{id:"step-5-define-constructor"},"Step 5: Define constructor"),(0,o.kt)("p",null,"Define constructor and initialize the owner with the contract initiator. Your basic version of ",(0,o.kt)("inlineCode",{parentName:"p"},"IPSP1155")," contract is ready!"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"impl PSP1155Struct {\n    #[ink(constructor)]\n    pub fn new() -> Self {\n        let mut instance = Self::default();\n        let caller = instance.env().caller();\n        instance._init_with_owner(caller);\n        instance\n    }\n}\n")),(0,o.kt)("h2",{id:"step-6-customize-your-contract"},"Step 6: Customize your contract"),(0,o.kt)("p",null,"Customize it by adding ownable logic. We will implement ",(0,o.kt)("inlineCode",{parentName:"p"},"IPSP1155Mint")," trait. Modifier ",(0,o.kt)("inlineCode",{parentName:"p"},"only_owner")," will call the function for us which verifies that\ncaller is the owner."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"impl IPSP1155Mint for PSP1155Struct {\n   #[ink(message)]\n   #[modifiers(only_owner)]\n   fn mint(&mut self, to: AccountId, id: Id, amount: Balance) {\n      self._mint(to, id, amount);\n   }\n\n   #[ink(message)]\n   #[modifiers(only_owner)]\n   fn burn(&mut self, from: AccountId, id: Id, amount: Balance) {\n      self._burn(from, id, amount);\n   }\n}\n")))}d.isMDXComponent=!0}}]);