"use strict";(self.webpackChunkopenbrush=self.webpackChunkopenbrush||[]).push([[815],{3905:function(t,e,n){n.d(e,{Zo:function(){return u},kt:function(){return h}});var r=n(7294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?a(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,r,o=function(t,e){if(null==t)return{};var n,r,o={},a=Object.keys(t);for(r=0;r<a.length;r++)n=a[r],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(r=0;r<a.length;r++)n=a[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var c=r.createContext({}),p=function(t){var e=r.useContext(c),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},u=function(t){var e=p(t.components);return r.createElement(c.Provider,{value:e},t.children)},l={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},m=r.forwardRef((function(t,e){var n=t.components,o=t.mdxType,a=t.originalType,c=t.parentName,u=s(t,["components","mdxType","originalType","parentName"]),m=p(n),h=o,f=m["".concat(c,".").concat(h)]||m[h]||l[h]||a;return n?r.createElement(f,i(i({ref:e},u),{},{components:n})):r.createElement(f,i({ref:e},u))}));function h(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var a=n.length,i=new Array(a);i[0]=m;var s={};for(var c in e)hasOwnProperty.call(e,c)&&(s[c]=e[c]);s.originalType=t,s.mdxType="string"==typeof t?t:o,i[1]=s;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4609:function(t,e,n){n.r(e),n.d(e,{assets:function(){return u},contentTitle:function(){return c},default:function(){return h},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return l}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],s={sidebar_position:2,title:"PSP35 Batch"},c=void 0,p={unversionedId:"smart-contracts/PSP35/Extensions/batch",id:"smart-contracts/PSP35/Extensions/batch",title:"PSP35 Batch",description:"This example shows how you can reuse the implementation of PSP35 token with PSP35Batch extension, which allows batch transferring of PSP35 tokens.",source:"@site/docs/smart-contracts/PSP35/Extensions/batch.md",sourceDirName:"smart-contracts/PSP35/Extensions",slug:"/smart-contracts/PSP35/Extensions/batch",permalink:"/smart-contracts/PSP35/Extensions/batch",draft:!1,editUrl:"https://github.com/Supercolony-net/openbrush-contracts/tree/main/docs/docs/smart-contracts/PSP35/Extensions/batch.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"PSP35 Batch"},sidebar:"tutorialSidebar",previous:{title:"PSP35 Metadata",permalink:"/smart-contracts/PSP35/Extensions/metadata"},next:{title:"PSP35 Mintable",permalink:"/smart-contracts/PSP35/Extensions/mintable"}},u={},l=[{value:"How to use this extension",id:"how-to-use-this-extension",level:2}],m={toc:l};function h(t){var e=t.components,n=(0,o.Z)(t,i);return(0,a.kt)("wrapper",(0,r.Z)({},m,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This example shows how you can reuse the implementation of ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Supercolony-net/openbrush-contracts/tree/main/contracts/token/psp35"},"PSP35")," token with ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Supercolony-net/openbrush-contracts/tree/main/contracts/token/psp35/src/extensions/batch.rs"},"PSP35Batch")," extension, which allows batch transferring of PSP35 tokens."),(0,a.kt)("h2",{id:"how-to-use-this-extension"},"How to use this extension"),(0,a.kt)("p",null,"For your smart contract to use this extension, you only need to implement the ",(0,a.kt)("inlineCode",{parentName:"p"},"PSP35Batch")," trait in your ",(0,a.kt)("inlineCode",{parentName:"p"},"PSP35")," smart contract. Add import for ",(0,a.kt)("inlineCode",{parentName:"p"},"openbrush::contracts::psp35::extensions::batch::*"),", inherit the implementation for ",(0,a.kt)("inlineCode",{parentName:"p"},"PSP35Batch")," trait, where you can also customize (override) the original functions from ",(0,a.kt)("inlineCode",{parentName:"p"},"PSP35Batch"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"use openbrush::contracts::psp35::extensions::batch::*;\n\nimpl PSP35Batch for MyPSP35 {}\n")),(0,a.kt)("p",null,"And that's it! Your ",(0,a.kt)("inlineCode",{parentName:"p"},"PSP35")," is now extended by the ",(0,a.kt)("inlineCode",{parentName:"p"},"PSP35Batch")," extension and ready to use its functions!\nYou can check an example of the usage of ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Supercolony-net/openbrush-contracts/tree/main/examples/psp35_extensions/batch"},"PSP35 Batch"),"."),(0,a.kt)("p",null,"You can also check the documentation for the basic implementation of ",(0,a.kt)("a",{parentName:"p",href:"/smart-contracts/PSP35"},"PSP35"),"."))}h.isMDXComponent=!0}}]);