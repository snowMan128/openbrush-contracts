"use strict";(self.webpackChunkopenbrush=self.webpackChunkopenbrush||[]).push([[728],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return h}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(t),h=o,f=m["".concat(l,".").concat(h)]||m[h]||u[h]||a;return t?r.createElement(f,i(i({ref:n},p),{},{components:t})):r.createElement(f,i({ref:n},p))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8148:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return m}});var r=t(7462),o=t(3366),a=(t(7294),t(3905)),i=["components"],s={sidebar_position:5,title:"PSP22 FlashMint"},l=void 0,c={unversionedId:"smart-contracts/PSP22/Extensions/flashmint",id:"smart-contracts/PSP22/Extensions/flashmint",isDocsHomePage:!1,title:"PSP22 FlashMint",description:"This example shows how you can reuse the implementation of PSP22 token with PSP22FlashMint extension, which allows the user to perform a flash loan on the token by minting the borrowed amount and then burning it along with fees for the loan.",source:"@site/docs/smart-contracts/PSP22/Extensions/flashmint.md",sourceDirName:"smart-contracts/PSP22/Extensions",slug:"/smart-contracts/PSP22/Extensions/flashmint",permalink:"/smart-contracts/PSP22/Extensions/flashmint",editUrl:"https://github.com/Supercolony-net/openbrush-contracts/tree/main/docs/docs/smart-contracts/PSP22/Extensions/flashmint.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,title:"PSP22 FlashMint"},sidebar:"tutorialSidebar",previous:{title:"PSP22 Wrapper",permalink:"/smart-contracts/PSP22/Extensions/wrapper"},next:{title:"PSP22 Pausable",permalink:"/smart-contracts/PSP22/Extensions/pausable"}},p=[{value:"1. Implement the FlashMint extension",id:"1-implement-the-flashmint-extension",children:[]},{value:"2. Implement the FlashLender",id:"2-implement-the-flashlender",children:[]}],u={toc:p};function m(e){var n=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This example shows how you can reuse the implementation of ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Supercolony-net/openbrush-contracts/tree/main/contracts/token/psp22"},"PSP22")," token with ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Supercolony-net/openbrush-contracts/tree/main/contracts/token/psp22/src/extensions/flashmint.rs"},"PSP22FlashMint")," extension, which allows the user to perform a flash loan on the token by minting the borrowed amount and then burning it along with fees for the loan."),(0,a.kt)("h2",{id:"1-implement-the-flashmint-extension"},"1. Implement the FlashMint extension"),(0,a.kt)("p",null,"For your smart contract to use this extension, you need to implement the ",(0,a.kt)("inlineCode",{parentName:"p"},"PSP22FlashMint")," trait in your ",(0,a.kt)("inlineCode",{parentName:"p"},"PSP22")," smart contract. Import everything from ",(0,a.kt)("inlineCode",{parentName:"p"},"psp22::extensions::flashmint::*")," and inherit the implementation for ",(0,a.kt)("inlineCode",{parentName:"p"},"PSP22FlashMint")," trait. You can also customize (override) the original functions from ",(0,a.kt)("inlineCode",{parentName:"p"},"PSP22FlashMint"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"use ink_prelude::vec::Vec;\nuse psp22::{\n    extensions::flashmint::*,\n    traits::*,\n};\n\nimpl PSP22FlashMint for MyPSP22FlashMint {}\n")),(0,a.kt)("h2",{id:"2-implement-the-flashlender"},"2. Implement the FlashLender"),(0,a.kt)("p",null,"You will also need to implement the ",(0,a.kt)("inlineCode",{parentName:"p"},"FlashLender")," trait, where you will call the functions from ",(0,a.kt)("inlineCode",{parentName:"p"},"PSP22FlashMint"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"impl FlashLender for MyPSP22FlashMint {\n    #[ink(message)]\n    fn max_flashloan(&mut self, token: AccountId) -> Balance {\n        self._max_flashloan(token)\n    }\n\n    #[ink(message)]\n    fn flash_fee(&mut self, token: AccountId, amount: Balance) -> Result<Balance, FlashLenderError> {\n        match self._flash_fee(token, amount) {\n            Ok(result) => Ok(result),\n            Err(e) => Err(e.into()),\n        }\n    }\n\n    #[ink(message)]\n    fn flashloan(\n        &mut self,\n        receiver_account: AccountId,\n        token: AccountId,\n        amount: Balance,\n        data: Vec<u8>,\n    ) -> Result<(), FlashLenderError> {\n        self._flashloan(receiver_account, token, amount, data)?;\n        Ok(())\n    }\n}\n")),(0,a.kt)("p",null,"And that's it! Your ",(0,a.kt)("inlineCode",{parentName:"p"},"PSP22")," is now extended by the ",(0,a.kt)("inlineCode",{parentName:"p"},"PSP22FlashMint")," extension and ready to use its functions!"),(0,a.kt)("p",null,"You can check the full example of the implementation of this extension ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Supercolony-net/openbrush-contracts/tree/main/examples/psp22_extensions/flashmint"},"here"),"."),(0,a.kt)("p",null,"You can also check the documentation for the basic implementation of ",(0,a.kt)("a",{parentName:"p",href:"/smart-contracts/PSP22/psp22"},"PSP22"),"."))}m.isMDXComponent=!0}}]);