


#[cfg(not(feature = "ink-as-dependency"))] #[ink_lang :: contract] pub mod
my_psp22
{
    use psp22 :: traits :: * ; use ink_storage :: Lazy ; use ink_prelude ::
    { string :: String, vec :: Vec } ; #[ink(storage)]
    #[derive(Default, PSP22Storage, PSP22MetadataStorage)] pub struct MyPSP22
    {
        #[PSP22StorageField] psp22 : PSP22Data, #[PSP22MetadataStorageField]
        metadata : PSP22MetadataData, hated_account : AccountId,
    } impl PSP22 for MyPSP22
    {
        fn
        _before_token_transfer(& mut self, _from : AccountId, _to : AccountId,
                               _amount : Balance)
        {
            assert!
            (_to != self.hated_account, "{}", PSP22Error ::
             Custom(String :: from("I hate this account!")).as_ref()) ;
        }
    } impl __brush_external_PSP22 :: PSP22 for MyPSP22
    {
        #[doc =
          " Returns the amount which `spender` is still allowed to withdraw from `owner`."]
        #[doc = ""] #[doc = " Returns `0` if no allowance has been set `0`."]
        #[ink(message)] fn
        allowance(& self, owner : AccountId, spender : AccountId) -> Balance
        { PSP22 :: allowance(self, owner, spender) }
        #[doc = " Returns the account Balance for the specified `owner`."]
        #[doc = ""] #[doc = " Returns `0` if the account is non-existent."]
        #[ink(message)] fn balance_of(& self, owner : AccountId) -> Balance
        { PSP22 :: balance_of(self, owner) }
        #[doc =
          " Atomically increases the allowance granted to `spender` by the caller."]
        #[doc = ""] #[doc = " An `Approval` event is emitted."] #[doc = ""]
        #[doc = " # Errors"] #[doc = ""]
        #[doc =
          " Panics `ZeroSenderAddress` error if sender\'s address is zero."]
        #[doc = ""]
        #[doc =
          " Panics `ZeroRecipientAddress` error if recipient\'s address is zero."]
        #[ink(message)] fn
        increase_allowance(& mut self, spender : AccountId, delta_value :
                           Balance) -> Result < (), PSP22Error >
        { PSP22 :: increase_allowance(self, spender, delta_value) }
        #[doc = " Returns the total token supply."] #[ink(message)] fn
        total_supply(& self) -> Balance { PSP22 :: total_supply(self) }
        #[doc =
          " Transfers `value` amount of tokens from the caller\'s account to account `to`"]
        #[doc = " with additional `data` in unspecified format."] #[doc = ""]
        #[doc = " On success a `Transfer` event is emitted."] #[doc = ""]
        #[doc = " # Errors"] #[doc = ""]
        #[doc =
          " Panics `InsufficientBalance` error if there are not enough tokens on"]
        #[doc = " the caller\'s account Balance."] #[doc = ""]
        #[doc =
          " Panics `ZeroSenderAddress` error if sender\'s address is zero."]
        #[doc = ""]
        #[doc =
          " Panics `ZeroRecipientAddress` error if recipient\'s address is zero."]
        #[ink(message)] fn
        transfer(& mut self, to : AccountId, value : Balance, data : Vec < u8
                 >) -> Result < (), PSP22Error >
        { PSP22 :: transfer(self, to, value, data) }
        #[doc =
          " Transfers `value` tokens on the behalf of `from` to the account `to`"]
        #[doc = " with additional `data` in unspecified format."] #[doc = ""]
        #[doc =
          " This can be used to allow a contract to transfer tokens on ones behalf and/or"]
        #[doc = " to charge fees in sub-currencies, for example."] #[doc = ""]
        #[doc = " On success a `Transfer` and `Approval` events are emitted."]
        #[doc = ""] #[doc = " # Errors"] #[doc = ""]
        #[doc =
          " Panics `InsufficientAllowance` error if there are not enough tokens allowed"]
        #[doc = " for the caller to withdraw from `from`."] #[doc = ""]
        #[doc =
          " Panics `InsufficientBalance` error if there are not enough tokens on"]
        #[doc = " the the account Balance of `from`."] #[doc = ""]
        #[doc =
          " Panics `ZeroSenderAddress` error if sender\'s address is zero."]
        #[doc = ""]
        #[doc =
          " Panics `ZeroRecipientAddress` error if recipient\'s address is zero."]
        #[ink(message)] fn
        transfer_from(& mut self, from : AccountId, to : AccountId, value :
                      Balance, data : Vec < u8 >) -> Result < (), PSP22Error >
        { PSP22 :: transfer_from(self, from, to, value, data) }
        #[doc =
          " Allows `spender` to withdraw from the caller\'s account multiple times, up to"]
        #[doc = " the `value` amount."] #[doc = ""]
        #[doc =
          " If this function is called again it overwrites the current allowance with `value`."]
        #[doc = ""] #[doc = " An `Approval` event is emitted."] #[doc = ""]
        #[doc = " # Errors"] #[doc = ""]
        #[doc =
          " Panics `ZeroSenderAddress` error if sender\'s address is zero."]
        #[doc = ""]
        #[doc =
          " Panics `ZeroRecipientAddress` error if recipient\'s address is zero."]
        #[ink(message)] fn
        approve(& mut self, spender : AccountId, value : Balance) -> Result <
        (), PSP22Error > { PSP22 :: approve(self, spender, value) }
        #[doc =
          " Atomically decreases the allowance granted to `spender` by the caller."]
        #[doc = ""] #[doc = " An `Approval` event is emitted."] #[doc = ""]
        #[doc = " # Errors"] #[doc = ""]
        #[doc =
          " Panics `InsufficientAllowance` error if there are not enough tokens allowed"]
        #[doc = " by owner for `spender`."] #[doc = ""]
        #[doc =
          " Panics `ZeroSenderAddress` error if sender\'s address is zero."]
        #[doc = ""]
        #[doc =
          " Panics `ZeroRecipientAddress` error if recipient\'s address is zero."]
        #[ink(message)] fn
        decrease_allowance(& mut self, spender : AccountId, delta_value :
                           Balance) -> Result < (), PSP22Error >
        { PSP22 :: decrease_allowance(self, spender, delta_value) }
    } impl PSP22Metadata for MyPSP22 { } impl __brush_external_PSP22Metadata
    :: PSP22Metadata for MyPSP22
    {
        #[doc = " Returns the token name."] #[ink(message)] fn
        token_name(& self) -> Option < String >
        { PSP22Metadata :: token_name(self) }
        #[doc = " Returns the token symbol."] #[ink(message)] fn
        token_symbol(& self) -> Option < String >
        { PSP22Metadata :: token_symbol(self) }
        #[doc = " Returns the token decimals."] #[ink(message)] fn
        token_decimals(& self) -> u8 { PSP22Metadata :: token_decimals(self) }
    } impl MyPSP22
    {
        #[ink(constructor)] pub fn
        new(total_supply : Balance, name : Option < String >, symbol : Option
            < String >, decimal : u8) -> Self
        {
            let mut instance = Self :: default() ; Lazy ::
            set(& mut instance.metadata.name, name) ; Lazy ::
            set(& mut instance.metadata.symbol, symbol) ; Lazy ::
            set(& mut instance.metadata.decimals, decimal) ;
            instance._mint(instance.env().caller(), total_supply) ; instance
        } #[ink(message)] pub fn
        set_hated_account(& mut self, hated : AccountId)
        { self.hated_account = hated ; } #[ink(message)] pub fn
        get_hated_account(& self) -> AccountId { self.hated_account.clone() }
    }
} #[cfg(feature = "ink-as-dependency")] #[ink_lang :: contract] pub mod
my_psp22
{
    use psp22 :: traits :: * ; use ink_storage :: Lazy ; use ink_prelude ::
    { string :: String, vec :: Vec } ; #[ink(storage)]
    #[derive(Default, PSP22Storage, PSP22MetadataStorage)] pub struct MyPSP22
    {
        #[PSP22StorageField] psp22 : PSP22Data, #[PSP22MetadataStorageField]
        metadata : PSP22MetadataData, hated_account : AccountId,
    } impl __brush_external_PSP22 :: PSP22 for MyPSP22
    {
        #[doc =
          " Returns the amount which `spender` is still allowed to withdraw from `owner`."]
        #[doc = ""] #[doc = " Returns `0` if no allowance has been set `0`."]
        #[ink(message)] fn
        allowance(& self, owner : AccountId, spender : AccountId) -> Balance
        { PSP22 :: allowance(self, owner, spender) }
        #[doc = " Returns the account Balance for the specified `owner`."]
        #[doc = ""] #[doc = " Returns `0` if the account is non-existent."]
        #[ink(message)] fn balance_of(& self, owner : AccountId) -> Balance
        { PSP22 :: balance_of(self, owner) }
        #[doc =
          " Atomically increases the allowance granted to `spender` by the caller."]
        #[doc = ""] #[doc = " An `Approval` event is emitted."] #[doc = ""]
        #[doc = " # Errors"] #[doc = ""]
        #[doc =
          " Panics `ZeroSenderAddress` error if sender\'s address is zero."]
        #[doc = ""]
        #[doc =
          " Panics `ZeroRecipientAddress` error if recipient\'s address is zero."]
        #[ink(message)] fn
        increase_allowance(& mut self, spender : AccountId, delta_value :
                           Balance) -> Result < (), PSP22Error >
        { PSP22 :: increase_allowance(self, spender, delta_value) }
        #[doc = " Returns the total token supply."] #[ink(message)] fn
        total_supply(& self) -> Balance { PSP22 :: total_supply(self) }
        #[doc =
          " Transfers `value` amount of tokens from the caller\'s account to account `to`"]
        #[doc = " with additional `data` in unspecified format."] #[doc = ""]
        #[doc = " On success a `Transfer` event is emitted."] #[doc = ""]
        #[doc = " # Errors"] #[doc = ""]
        #[doc =
          " Panics `InsufficientBalance` error if there are not enough tokens on"]
        #[doc = " the caller\'s account Balance."] #[doc = ""]
        #[doc =
          " Panics `ZeroSenderAddress` error if sender\'s address is zero."]
        #[doc = ""]
        #[doc =
          " Panics `ZeroRecipientAddress` error if recipient\'s address is zero."]
        #[ink(message)] fn
        transfer(& mut self, to : AccountId, value : Balance, data : Vec < u8
                 >) -> Result < (), PSP22Error >
        { PSP22 :: transfer(self, to, value, data) }
        #[doc =
          " Transfers `value` tokens on the behalf of `from` to the account `to`"]
        #[doc = " with additional `data` in unspecified format."] #[doc = ""]
        #[doc =
          " This can be used to allow a contract to transfer tokens on ones behalf and/or"]
        #[doc = " to charge fees in sub-currencies, for example."] #[doc = ""]
        #[doc = " On success a `Transfer` and `Approval` events are emitted."]
        #[doc = ""] #[doc = " # Errors"] #[doc = ""]
        #[doc =
          " Panics `InsufficientAllowance` error if there are not enough tokens allowed"]
        #[doc = " for the caller to withdraw from `from`."] #[doc = ""]
        #[doc =
          " Panics `InsufficientBalance` error if there are not enough tokens on"]
        #[doc = " the the account Balance of `from`."] #[doc = ""]
        #[doc =
          " Panics `ZeroSenderAddress` error if sender\'s address is zero."]
        #[doc = ""]
        #[doc =
          " Panics `ZeroRecipientAddress` error if recipient\'s address is zero."]
        #[ink(message)] fn
        transfer_from(& mut self, from : AccountId, to : AccountId, value :
                      Balance, data : Vec < u8 >) -> Result < (), PSP22Error >
        { PSP22 :: transfer_from(self, from, to, value, data) }
        #[doc =
          " Allows `spender` to withdraw from the caller\'s account multiple times, up to"]
        #[doc = " the `value` amount."] #[doc = ""]
        #[doc =
          " If this function is called again it overwrites the current allowance with `value`."]
        #[doc = ""] #[doc = " An `Approval` event is emitted."] #[doc = ""]
        #[doc = " # Errors"] #[doc = ""]
        #[doc =
          " Panics `ZeroSenderAddress` error if sender\'s address is zero."]
        #[doc = ""]
        #[doc =
          " Panics `ZeroRecipientAddress` error if recipient\'s address is zero."]
        #[ink(message)] fn
        approve(& mut self, spender : AccountId, value : Balance) -> Result <
        (), PSP22Error > { PSP22 :: approve(self, spender, value) }
        #[doc =
          " Atomically decreases the allowance granted to `spender` by the caller."]
        #[doc = ""] #[doc = " An `Approval` event is emitted."] #[doc = ""]
        #[doc = " # Errors"] #[doc = ""]
        #[doc =
          " Panics `InsufficientAllowance` error if there are not enough tokens allowed"]
        #[doc = " by owner for `spender`."] #[doc = ""]
        #[doc =
          " Panics `ZeroSenderAddress` error if sender\'s address is zero."]
        #[doc = ""]
        #[doc =
          " Panics `ZeroRecipientAddress` error if recipient\'s address is zero."]
        #[ink(message)] fn
        decrease_allowance(& mut self, spender : AccountId, delta_value :
                           Balance) -> Result < (), PSP22Error >
        { PSP22 :: decrease_allowance(self, spender, delta_value) }
    } impl __brush_external_PSP22Metadata :: PSP22Metadata for MyPSP22
    {
        #[doc = " Returns the token name."] #[ink(message)] fn
        token_name(& self) -> Option < String >
        { PSP22Metadata :: token_name(self) }
        #[doc = " Returns the token symbol."] #[ink(message)] fn
        token_symbol(& self) -> Option < String >
        { PSP22Metadata :: token_symbol(self) }
        #[doc = " Returns the token decimals."] #[ink(message)] fn
        token_decimals(& self) -> u8 { PSP22Metadata :: token_decimals(self) }
    } impl MyPSP22
    {
        #[ink(constructor)] pub fn
        new(total_supply : Balance, name : Option < String >, symbol : Option
            < String >, decimal : u8) -> Self
        {
            let mut instance = Self :: default() ; Lazy ::
            set(& mut instance.metadata.name, name) ; Lazy ::
            set(& mut instance.metadata.symbol, symbol) ; Lazy ::
            set(& mut instance.metadata.decimals, decimal) ;
            instance._mint(instance.env().caller(), total_supply) ; instance
        } #[ink(message)] pub fn
        set_hated_account(& mut self, hated : AccountId)
        { self.hated_account = hated ; } #[ink(message)] pub fn
        get_hated_account(& self) -> AccountId { self.hated_account.clone() }
    }
}
#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
#[cfg(not(feature = "ink-as-dependency"))]
pub mod my_psp22 {
    impl ::ink_lang::reflect::ContractEnv for MyPSP22 {
        type Env = ::ink_env::DefaultEnvironment;
    }
    type Environment = <MyPSP22 as ::ink_lang::reflect::ContractEnv>::Env;
    type AccountId =
        <<MyPSP22 as ::ink_lang::reflect::ContractEnv>::Env as ::ink_env::Environment>::AccountId;
    type Balance =
        <<MyPSP22 as ::ink_lang::reflect::ContractEnv>::Env as ::ink_env::Environment>::Balance;
    type Hash =
        <<MyPSP22 as ::ink_lang::reflect::ContractEnv>::Env as ::ink_env::Environment>::Hash;
    type Timestamp =
        <<MyPSP22 as ::ink_lang::reflect::ContractEnv>::Env as ::ink_env::Environment>::Timestamp;
    type BlockNumber =
        <<MyPSP22 as ::ink_lang::reflect::ContractEnv>::Env as ::ink_env::Environment>::BlockNumber;
    const _: () = {
        impl<'a> ::ink_lang::codegen::Env for &'a MyPSP22 {
            type EnvAccess =
                ::ink_lang::EnvAccess<'a, <MyPSP22 as ::ink_lang::reflect::ContractEnv>::Env>;
            fn env(self) -> Self::EnvAccess {
                <<Self as ::ink_lang::codegen::Env>::EnvAccess as ::core::default::Default>::default(
                )
            }
        }
        impl<'a> ::ink_lang::codegen::StaticEnv for MyPSP22 {
            type EnvAccess =
                ::ink_lang::EnvAccess<'static, <MyPSP22 as ::ink_lang::reflect::ContractEnv>::Env>;
            fn env() -> Self::EnvAccess {
                < < Self as :: ink_lang :: codegen :: StaticEnv > :: EnvAccess as :: core :: default :: Default > :: default ()
            }
        }
    };
    pub struct MyPSP22 {
        #[PSP22StorageField]
        psp22: PSP22Data,
        #[PSP22MetadataStorageField]
        metadata: PSP22MetadataData,
        hated_account: AccountId,
    }
    const _: () = {
        impl ::ink_storage::traits::SpreadLayout for MyPSP22 {
            #[allow(unused_comparisons)]
            const FOOTPRINT: ::core::primitive::u64 = [
                (((0u64 + <PSP22Data as ::ink_storage::traits::SpreadLayout>::FOOTPRINT)
                    + <PSP22MetadataData as ::ink_storage::traits::SpreadLayout>::FOOTPRINT)
                    + <AccountId as ::ink_storage::traits::SpreadLayout>::FOOTPRINT),
                0u64,
            ][((((0u64
                + <PSP22Data as ::ink_storage::traits::SpreadLayout>::FOOTPRINT)
                + <PSP22MetadataData as ::ink_storage::traits::SpreadLayout>::FOOTPRINT)
                + <AccountId as ::ink_storage::traits::SpreadLayout>::FOOTPRINT)
                < 0u64) as ::core::primitive::usize];
            const REQUIRES_DEEP_CLEAN_UP : :: core :: primitive :: bool = (false || (((false || < PSP22Data as :: ink_storage :: traits :: SpreadLayout > :: REQUIRES_DEEP_CLEAN_UP) || < PSP22MetadataData as :: ink_storage :: traits :: SpreadLayout > :: REQUIRES_DEEP_CLEAN_UP) || < AccountId as :: ink_storage :: traits :: SpreadLayout > :: REQUIRES_DEEP_CLEAN_UP)) ;
            fn pull_spread(__key_ptr: &mut ::ink_storage::traits::KeyPtr) -> Self {
                MyPSP22 {
                    psp22: <PSP22Data as ::ink_storage::traits::SpreadLayout>::pull_spread(
                        __key_ptr,
                    ),
                    metadata:
                        <PSP22MetadataData as ::ink_storage::traits::SpreadLayout>::pull_spread(
                            __key_ptr,
                        ),
                    hated_account: <AccountId as ::ink_storage::traits::SpreadLayout>::pull_spread(
                        __key_ptr,
                    ),
                }
            }
            fn push_spread(&self, __key_ptr: &mut ::ink_storage::traits::KeyPtr) {
                match self {
                    MyPSP22 {
                        psp22: __binding_0,
                        metadata: __binding_1,
                        hated_account: __binding_2,
                    } => {
                        {
                            ::ink_storage::traits::SpreadLayout::push_spread(
                                __binding_0,
                                __key_ptr,
                            );
                        }
                        {
                            ::ink_storage::traits::SpreadLayout::push_spread(
                                __binding_1,
                                __key_ptr,
                            );
                        }
                        {
                            ::ink_storage::traits::SpreadLayout::push_spread(
                                __binding_2,
                                __key_ptr,
                            );
                        }
                    }
                }
            }
            fn clear_spread(&self, __key_ptr: &mut ::ink_storage::traits::KeyPtr) {
                match self {
                    MyPSP22 {
                        psp22: __binding_0,
                        metadata: __binding_1,
                        hated_account: __binding_2,
                    } => {
                        {
                            ::ink_storage::traits::SpreadLayout::clear_spread(
                                __binding_0,
                                __key_ptr,
                            );
                        }
                        {
                            ::ink_storage::traits::SpreadLayout::clear_spread(
                                __binding_1,
                                __key_ptr,
                            );
                        }
                        {
                            ::ink_storage::traits::SpreadLayout::clear_spread(
                                __binding_2,
                                __key_ptr,
                            );
                        }
                    }
                }
            }
        }
    };
    const _: () = {
        impl ::ink_storage::traits::StorageLayout for MyPSP22 {
            fn layout(
                __key_ptr: &mut ::ink_storage::traits::KeyPtr,
            ) -> ::ink_metadata::layout::Layout {
                ::ink_metadata::layout::Layout::Struct(::ink_metadata::layout::StructLayout::new([
                    ::ink_metadata::layout::FieldLayout::new(
                        ::core::option::Option::Some("psp22"),
                        <PSP22Data as ::ink_storage::traits::StorageLayout>::layout(__key_ptr),
                    ),
                    ::ink_metadata::layout::FieldLayout::new(
                        ::core::option::Option::Some("metadata"),
                        <PSP22MetadataData as ::ink_storage::traits::StorageLayout>::layout(
                            __key_ptr,
                        ),
                    ),
                    ::ink_metadata::layout::FieldLayout::new(
                        ::core::option::Option::Some("hated_account"),
                        <AccountId as ::ink_storage::traits::StorageLayout>::layout(__key_ptr),
                    ),
                ]))
            }
        }
    };
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::default::Default for MyPSP22 {
        #[inline]
        fn default() -> MyPSP22 {
            MyPSP22 {
                psp22: ::core::default::Default::default(),
                metadata: ::core::default::Default::default(),
                hated_account: ::core::default::Default::default(),
            }
        }
    }
    impl PSP22Storage for MyPSP22 {
        fn get(&self) -> &PSP22Data {
            &self.psp22
        }
        fn get_mut(&mut self) -> &mut PSP22Data {
            &mut self.psp22
        }
    }
    impl PSP22MetadataStorage for MyPSP22 {
        fn get(&self) -> &PSP22MetadataData {
            &self.metadata
        }
        fn get_mut(&mut self) -> &mut PSP22MetadataData {
            &mut self.metadata
        }
    }
    const _: () = {
        impl ::ink_lang::reflect::ContractName for MyPSP22 {
            const NAME: &'static str = "MyPSP22";
        }
    };
    const _: () = {
        #[allow(unused_imports)]
        use ::ink_lang::codegen::{Env as _, StaticEnv as _};
    };
    impl ::ink_lang::reflect::ContractAmountDispatchables for MyPSP22 {
        const MESSAGES: ::core::primitive::usize = 13usize;
        const CONSTRUCTORS: ::core::primitive::usize = 1usize;
    }
    impl
        ::ink_lang::reflect::ContractDispatchableMessages<
            { <MyPSP22 as ::ink_lang::reflect::ContractAmountDispatchables>::MESSAGES },
        > for MyPSP22
    {
        const IDS: [::core::primitive::u32;
            <MyPSP22 as ::ink_lang::reflect::ContractAmountDispatchables>::MESSAGES] = [
            0x19398962_u32,
            0x9E5E363F_u32,
            {
                :: core :: primitive :: u32 :: from_be_bytes (< < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0x6A00165E_u32 > > :: SELECTOR)
            },
            {
                :: core :: primitive :: u32 :: from_be_bytes (< < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0x0F755A56_u32 > > :: SELECTOR)
            },
            {
                :: core :: primitive :: u32 :: from_be_bytes (< < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0xF551D422_u32 > > :: SELECTOR)
            },
            {
                :: core :: primitive :: u32 :: from_be_bytes (< < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0xDB6375A8_u32 > > :: SELECTOR)
            },
            {
                :: core :: primitive :: u32 :: from_be_bytes (< < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0x84A15DA1_u32 > > :: SELECTOR)
            },
            {
                :: core :: primitive :: u32 :: from_be_bytes (< < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0x0B396F18_u32 > > :: SELECTOR)
            },
            {
                :: core :: primitive :: u32 :: from_be_bytes (< < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0x681266A0_u32 > > :: SELECTOR)
            },
            {
                :: core :: primitive :: u32 :: from_be_bytes (< < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0xF998EBD9_u32 > > :: SELECTOR)
            },
            {
                :: core :: primitive :: u32 :: from_be_bytes (< < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22Metadata :: PSP22Metadata > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0x53DB29AE_u32 > > :: SELECTOR)
            },
            {
                :: core :: primitive :: u32 :: from_be_bytes (< < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22Metadata :: PSP22Metadata > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0xD733EA17_u32 > > :: SELECTOR)
            },
            {
                :: core :: primitive :: u32 :: from_be_bytes (< < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22Metadata :: PSP22Metadata > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0x9715E3CA_u32 > > :: SELECTOR)
            },
        ];
    }
    impl
        ::ink_lang::reflect::ContractDispatchableConstructors<
            { <MyPSP22 as ::ink_lang::reflect::ContractAmountDispatchables>::CONSTRUCTORS },
        > for MyPSP22
    {
        const IDS: [::core::primitive::u32;
            <MyPSP22 as ::ink_lang::reflect::ContractAmountDispatchables>::CONSTRUCTORS] =
            [0x9BAE9D5E_u32];
    }
    impl ::ink_lang::reflect::DispatchableConstructorInfo<0x9BAE9D5E_u32> for MyPSP22 {
        type Input = (Balance, Option<String>, Option<String>, u8);
        type Storage = MyPSP22;
        const CALLABLE: fn(Self::Input) -> Self::Storage =
            |(__ink_binding_0, __ink_binding_1, __ink_binding_2, __ink_binding_3)| {
                MyPSP22::new(
                    __ink_binding_0,
                    __ink_binding_1,
                    __ink_binding_2,
                    __ink_binding_3,
                )
            };
        const SELECTOR: [::core::primitive::u8; 4usize] = [0x9B_u8, 0xAE_u8, 0x9D_u8, 0x5E_u8];
        const LABEL: &'static ::core::primitive::str = "new";
    }
    impl ::ink_lang::reflect::DispatchableMessageInfo<0x19398962_u32> for MyPSP22 {
        type Input = AccountId;
        type Output = ();
        type Storage = MyPSP22;
        const CALLABLE: fn(&mut Self::Storage, Self::Input) -> Self::Output =
            |storage, __ink_binding_0| MyPSP22::set_hated_account(storage, __ink_binding_0);
        const SELECTOR: [::core::primitive::u8; 4usize] = [0x19_u8, 0x39_u8, 0x89_u8, 0x62_u8];
        const PAYABLE: ::core::primitive::bool = false;
        const MUTATES: ::core::primitive::bool = true;
        const LABEL: &'static ::core::primitive::str = "set_hated_account";
    }
    impl ::ink_lang::reflect::DispatchableMessageInfo<0x9E5E363F_u32> for MyPSP22 {
        type Input = ();
        type Output = AccountId;
        type Storage = MyPSP22;
        const CALLABLE: fn(&mut Self::Storage, Self::Input) -> Self::Output =
            |storage, _| MyPSP22::get_hated_account(storage);
        const SELECTOR: [::core::primitive::u8; 4usize] = [0x9E_u8, 0x5E_u8, 0x36_u8, 0x3F_u8];
        const PAYABLE: ::core::primitive::bool = false;
        const MUTATES: ::core::primitive::bool = false;
        const LABEL: &'static ::core::primitive::str = "get_hated_account";
    }
    impl
        ::ink_lang::reflect::DispatchableMessageInfo<
            {
                ::core::primitive::u32::from_be_bytes({
                    < < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0x6A00165E_u32 > > :: SELECTOR
                })
            },
        > for MyPSP22
    {
        type Input = (AccountId, AccountId);
        type Output = Balance;
        type Storage = MyPSP22;
        const CALLABLE: fn(&mut Self::Storage, Self::Input) -> Self::Output =
            |storage, (__ink_binding_0, __ink_binding_1)| {
                MyPSP22::allowance(storage, __ink_binding_0, __ink_binding_1)
            };
        const SELECTOR: [::core::primitive::u8; 4usize] = {
            < < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0x6A00165E_u32 > > :: SELECTOR
        };
        const PAYABLE: ::core::primitive::bool = {
            < < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0x6A00165E_u32 > > :: PAYABLE
        };
        const MUTATES: ::core::primitive::bool = false;
        const LABEL: &'static ::core::primitive::str = "PSP22::allowance";
    }
    impl
        ::ink_lang::reflect::DispatchableMessageInfo<
            {
                ::core::primitive::u32::from_be_bytes({
                    < < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0x0F755A56_u32 > > :: SELECTOR
                })
            },
        > for MyPSP22
    {
        type Input = AccountId;
        type Output = Balance;
        type Storage = MyPSP22;
        const CALLABLE: fn(&mut Self::Storage, Self::Input) -> Self::Output =
            |storage, __ink_binding_0| MyPSP22::balance_of(storage, __ink_binding_0);
        const SELECTOR: [::core::primitive::u8; 4usize] = {
            < < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0x0F755A56_u32 > > :: SELECTOR
        };
        const PAYABLE: ::core::primitive::bool = {
            < < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0x0F755A56_u32 > > :: PAYABLE
        };
        const MUTATES: ::core::primitive::bool = false;
        const LABEL: &'static ::core::primitive::str = "PSP22::balance_of";
    }
    impl
        ::ink_lang::reflect::DispatchableMessageInfo<
            {
                ::core::primitive::u32::from_be_bytes({
                    < < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0xF551D422_u32 > > :: SELECTOR
                })
            },
        > for MyPSP22
    {
        type Input = (AccountId, Balance);
        type Output = Result<(), PSP22Error>;
        type Storage = MyPSP22;
        const CALLABLE: fn(&mut Self::Storage, Self::Input) -> Self::Output =
            |storage, (__ink_binding_0, __ink_binding_1)| {
                MyPSP22::increase_allowance(storage, __ink_binding_0, __ink_binding_1)
            };
        const SELECTOR: [::core::primitive::u8; 4usize] = {
            < < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0xF551D422_u32 > > :: SELECTOR
        };
        const PAYABLE: ::core::primitive::bool = {
            < < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0xF551D422_u32 > > :: PAYABLE
        };
        const MUTATES: ::core::primitive::bool = true;
        const LABEL: &'static ::core::primitive::str = "PSP22::increase_allowance";
    }
    impl
        ::ink_lang::reflect::DispatchableMessageInfo<
            {
                ::core::primitive::u32::from_be_bytes({
                    < < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0xDB6375A8_u32 > > :: SELECTOR
                })
            },
        > for MyPSP22
    {
        type Input = ();
        type Output = Balance;
        type Storage = MyPSP22;
        const CALLABLE: fn(&mut Self::Storage, Self::Input) -> Self::Output =
            |storage, _| MyPSP22::total_supply(storage);
        const SELECTOR: [::core::primitive::u8; 4usize] = {
            < < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0xDB6375A8_u32 > > :: SELECTOR
        };
        const PAYABLE: ::core::primitive::bool = {
            < < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0xDB6375A8_u32 > > :: PAYABLE
        };
        const MUTATES: ::core::primitive::bool = false;
        const LABEL: &'static ::core::primitive::str = "PSP22::total_supply";
    }
    impl
        ::ink_lang::reflect::DispatchableMessageInfo<
            {
                ::core::primitive::u32::from_be_bytes({
                    < < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0x84A15DA1_u32 > > :: SELECTOR
                })
            },
        > for MyPSP22
    {
        type Input = (AccountId, Balance, Vec<u8>);
        type Output = Result<(), PSP22Error>;
        type Storage = MyPSP22;
        const CALLABLE: fn(&mut Self::Storage, Self::Input) -> Self::Output =
            |storage, (__ink_binding_0, __ink_binding_1, __ink_binding_2)| {
                MyPSP22::transfer(storage, __ink_binding_0, __ink_binding_1, __ink_binding_2)
            };
        const SELECTOR: [::core::primitive::u8; 4usize] = {
            < < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0x84A15DA1_u32 > > :: SELECTOR
        };
        const PAYABLE: ::core::primitive::bool = {
            < < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0x84A15DA1_u32 > > :: PAYABLE
        };
        const MUTATES: ::core::primitive::bool = true;
        const LABEL: &'static ::core::primitive::str = "PSP22::transfer";
    }
    impl
        ::ink_lang::reflect::DispatchableMessageInfo<
            {
                ::core::primitive::u32::from_be_bytes({
                    < < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0x0B396F18_u32 > > :: SELECTOR
                })
            },
        > for MyPSP22
    {
        type Input = (AccountId, AccountId, Balance, Vec<u8>);
        type Output = Result<(), PSP22Error>;
        type Storage = MyPSP22;
        const CALLABLE: fn(&mut Self::Storage, Self::Input) -> Self::Output =
            |storage, (__ink_binding_0, __ink_binding_1, __ink_binding_2, __ink_binding_3)| {
                MyPSP22::transfer_from(
                    storage,
                    __ink_binding_0,
                    __ink_binding_1,
                    __ink_binding_2,
                    __ink_binding_3,
                )
            };
        const SELECTOR: [::core::primitive::u8; 4usize] = {
            < < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0x0B396F18_u32 > > :: SELECTOR
        };
        const PAYABLE: ::core::primitive::bool = {
            < < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0x0B396F18_u32 > > :: PAYABLE
        };
        const MUTATES: ::core::primitive::bool = true;
        const LABEL: &'static ::core::primitive::str = "PSP22::transfer_from";
    }
    impl
        ::ink_lang::reflect::DispatchableMessageInfo<
            {
                ::core::primitive::u32::from_be_bytes({
                    < < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0x681266A0_u32 > > :: SELECTOR
                })
            },
        > for MyPSP22
    {
        type Input = (AccountId, Balance);
        type Output = Result<(), PSP22Error>;
        type Storage = MyPSP22;
        const CALLABLE: fn(&mut Self::Storage, Self::Input) -> Self::Output =
            |storage, (__ink_binding_0, __ink_binding_1)| {
                MyPSP22::approve(storage, __ink_binding_0, __ink_binding_1)
            };
        const SELECTOR: [::core::primitive::u8; 4usize] = {
            < < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0x681266A0_u32 > > :: SELECTOR
        };
        const PAYABLE: ::core::primitive::bool = {
            < < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0x681266A0_u32 > > :: PAYABLE
        };
        const MUTATES: ::core::primitive::bool = true;
        const LABEL: &'static ::core::primitive::str = "PSP22::approve";
    }
    impl
        ::ink_lang::reflect::DispatchableMessageInfo<
            {
                ::core::primitive::u32::from_be_bytes({
                    < < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0xF998EBD9_u32 > > :: SELECTOR
                })
            },
        > for MyPSP22
    {
        type Input = (AccountId, Balance);
        type Output = Result<(), PSP22Error>;
        type Storage = MyPSP22;
        const CALLABLE: fn(&mut Self::Storage, Self::Input) -> Self::Output =
            |storage, (__ink_binding_0, __ink_binding_1)| {
                MyPSP22::decrease_allowance(storage, __ink_binding_0, __ink_binding_1)
            };
        const SELECTOR: [::core::primitive::u8; 4usize] = {
            < < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0xF998EBD9_u32 > > :: SELECTOR
        };
        const PAYABLE: ::core::primitive::bool = {
            < < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0xF998EBD9_u32 > > :: PAYABLE
        };
        const MUTATES: ::core::primitive::bool = true;
        const LABEL: &'static ::core::primitive::str = "PSP22::decrease_allowance";
    }
    impl
        ::ink_lang::reflect::DispatchableMessageInfo<
            {
                ::core::primitive::u32::from_be_bytes({
                    < < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22Metadata :: PSP22Metadata > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0x53DB29AE_u32 > > :: SELECTOR
                })
            },
        > for MyPSP22
    {
        type Input = ();
        type Output = Option<String>;
        type Storage = MyPSP22;
        const CALLABLE: fn(&mut Self::Storage, Self::Input) -> Self::Output =
            |storage, _| MyPSP22::token_name(storage);
        const SELECTOR: [::core::primitive::u8; 4usize] = {
            < < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22Metadata :: PSP22Metadata > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0x53DB29AE_u32 > > :: SELECTOR
        };
        const PAYABLE: ::core::primitive::bool = {
            < < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22Metadata :: PSP22Metadata > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0x53DB29AE_u32 > > :: PAYABLE
        };
        const MUTATES: ::core::primitive::bool = false;
        const LABEL: &'static ::core::primitive::str = "PSP22Metadata::token_name";
    }
    impl
        ::ink_lang::reflect::DispatchableMessageInfo<
            {
                ::core::primitive::u32::from_be_bytes({
                    < < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22Metadata :: PSP22Metadata > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0xD733EA17_u32 > > :: SELECTOR
                })
            },
        > for MyPSP22
    {
        type Input = ();
        type Output = Option<String>;
        type Storage = MyPSP22;
        const CALLABLE: fn(&mut Self::Storage, Self::Input) -> Self::Output =
            |storage, _| MyPSP22::token_symbol(storage);
        const SELECTOR: [::core::primitive::u8; 4usize] = {
            < < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22Metadata :: PSP22Metadata > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0xD733EA17_u32 > > :: SELECTOR
        };
        const PAYABLE: ::core::primitive::bool = {
            < < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22Metadata :: PSP22Metadata > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0xD733EA17_u32 > > :: PAYABLE
        };
        const MUTATES: ::core::primitive::bool = false;
        const LABEL: &'static ::core::primitive::str = "PSP22Metadata::token_symbol";
    }
    impl
        ::ink_lang::reflect::DispatchableMessageInfo<
            {
                ::core::primitive::u32::from_be_bytes({
                    < < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22Metadata :: PSP22Metadata > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0x9715E3CA_u32 > > :: SELECTOR
                })
            },
        > for MyPSP22
    {
        type Input = ();
        type Output = u8;
        type Storage = MyPSP22;
        const CALLABLE: fn(&mut Self::Storage, Self::Input) -> Self::Output =
            |storage, _| MyPSP22::token_decimals(storage);
        const SELECTOR: [::core::primitive::u8; 4usize] = {
            < < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22Metadata :: PSP22Metadata > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0x9715E3CA_u32 > > :: SELECTOR
        };
        const PAYABLE: ::core::primitive::bool = {
            < < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22Metadata :: PSP22Metadata > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0x9715E3CA_u32 > > :: PAYABLE
        };
        const MUTATES: ::core::primitive::bool = false;
        const LABEL: &'static ::core::primitive::str = "PSP22Metadata::token_decimals";
    }
    const _: () = {
        #[allow(non_camel_case_types)]
        pub enum __ink_ConstructorDecoder {
            Constructor0(
                <MyPSP22 as ::ink_lang::reflect::DispatchableConstructorInfo<
                    {
                        <MyPSP22 as ::ink_lang::reflect::ContractDispatchableConstructors<
                            {
                                < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: CONSTRUCTORS
                            },
                        >>::IDS[0usize]
                    },
                >>::Input,
            ),
        }
        impl ::ink_lang::reflect::DecodeDispatch for __ink_ConstructorDecoder {
            fn decode_dispatch<I>(
                input: &mut I,
            ) -> ::core::result::Result<Self, ::ink_lang::reflect::DispatchError>
            where
                I: ::scale::Input,
            {
                match < [:: core :: primitive :: u8 ; 4usize] as :: scale :: Decode > :: decode (input) . map_err (| _ | :: ink_lang :: reflect :: DispatchError :: InvalidSelector) ? { < MyPSP22 as :: ink_lang :: reflect :: DispatchableConstructorInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableConstructors < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: CONSTRUCTORS } > > :: IDS [0usize] } > > :: SELECTOR => { :: core :: result :: Result :: Ok (Self :: Constructor0 (< < MyPSP22 as :: ink_lang :: reflect :: DispatchableConstructorInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableConstructors < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: CONSTRUCTORS } > > :: IDS [0usize] } > > :: Input as :: scale :: Decode > :: decode (input) . map_err (| _ | :: ink_lang :: reflect :: DispatchError :: InvalidParameters) ?)) } _invalid => :: core :: result :: Result :: Err (:: ink_lang :: reflect :: DispatchError :: UnknownSelector) , }
            }
        }
        impl ::scale::Decode for __ink_ConstructorDecoder {
            fn decode<I>(input: &mut I) -> ::core::result::Result<Self, ::scale::Error>
            where
                I: ::scale::Input,
            {
                <Self as ::ink_lang::reflect::DecodeDispatch>::decode_dispatch(input)
                    .map_err(::core::convert::Into::into)
            }
        }
        impl ::ink_lang::reflect::ExecuteDispatchable for __ink_ConstructorDecoder {
            fn execute_dispatchable(
                self,
            ) -> ::core::result::Result<(), ::ink_lang::reflect::DispatchError> {
                match self {
                    Self::Constructor0(input) => {
                        ::ink_lang::codegen::execute_constructor::<MyPSP22, _>(
                            ::ink_lang::codegen::ExecuteConstructorConfig {
                                dynamic_storage_alloc: false,
                            },
                            move || {
                                <MyPSP22 as ::ink_lang::reflect::DispatchableConstructorInfo<
                                    {
                                        < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableConstructors < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: CONSTRUCTORS } > > :: IDS [0usize]
                                    },
                                >>::CALLABLE(input)
                            },
                        )
                    }
                }
            }
        }
        impl ::ink_lang::reflect::ContractConstructorDecoder for MyPSP22 {
            type Type = __ink_ConstructorDecoder;
        }
    };
    const _: () = {
        #[allow(non_camel_case_types)]
        pub enum __ink_MessageDecoder {
            Message0(
                <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                    {
                        <MyPSP22 as ::ink_lang::reflect::ContractDispatchableMessages<
                            {
                                < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES
                            },
                        >>::IDS[0usize]
                    },
                >>::Input,
            ),
            Message1(
                <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                    {
                        <MyPSP22 as ::ink_lang::reflect::ContractDispatchableMessages<
                            {
                                < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES
                            },
                        >>::IDS[1usize]
                    },
                >>::Input,
            ),
            Message2(
                <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                    {
                        <MyPSP22 as ::ink_lang::reflect::ContractDispatchableMessages<
                            {
                                < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES
                            },
                        >>::IDS[2usize]
                    },
                >>::Input,
            ),
            Message3(
                <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                    {
                        <MyPSP22 as ::ink_lang::reflect::ContractDispatchableMessages<
                            {
                                < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES
                            },
                        >>::IDS[3usize]
                    },
                >>::Input,
            ),
            Message4(
                <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                    {
                        <MyPSP22 as ::ink_lang::reflect::ContractDispatchableMessages<
                            {
                                < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES
                            },
                        >>::IDS[4usize]
                    },
                >>::Input,
            ),
            Message5(
                <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                    {
                        <MyPSP22 as ::ink_lang::reflect::ContractDispatchableMessages<
                            {
                                < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES
                            },
                        >>::IDS[5usize]
                    },
                >>::Input,
            ),
            Message6(
                <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                    {
                        <MyPSP22 as ::ink_lang::reflect::ContractDispatchableMessages<
                            {
                                < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES
                            },
                        >>::IDS[6usize]
                    },
                >>::Input,
            ),
            Message7(
                <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                    {
                        <MyPSP22 as ::ink_lang::reflect::ContractDispatchableMessages<
                            {
                                < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES
                            },
                        >>::IDS[7usize]
                    },
                >>::Input,
            ),
            Message8(
                <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                    {
                        <MyPSP22 as ::ink_lang::reflect::ContractDispatchableMessages<
                            {
                                < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES
                            },
                        >>::IDS[8usize]
                    },
                >>::Input,
            ),
            Message9(
                <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                    {
                        <MyPSP22 as ::ink_lang::reflect::ContractDispatchableMessages<
                            {
                                < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES
                            },
                        >>::IDS[9usize]
                    },
                >>::Input,
            ),
            Message10(
                <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                    {
                        <MyPSP22 as ::ink_lang::reflect::ContractDispatchableMessages<
                            {
                                < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES
                            },
                        >>::IDS[10usize]
                    },
                >>::Input,
            ),
            Message11(
                <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                    {
                        <MyPSP22 as ::ink_lang::reflect::ContractDispatchableMessages<
                            {
                                < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES
                            },
                        >>::IDS[11usize]
                    },
                >>::Input,
            ),
            Message12(
                <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                    {
                        <MyPSP22 as ::ink_lang::reflect::ContractDispatchableMessages<
                            {
                                < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES
                            },
                        >>::IDS[12usize]
                    },
                >>::Input,
            ),
        }
        impl ::ink_lang::reflect::DecodeDispatch for __ink_MessageDecoder {
            fn decode_dispatch<I>(
                input: &mut I,
            ) -> ::core::result::Result<Self, ::ink_lang::reflect::DispatchError>
            where
                I: ::scale::Input,
            {
                match < [:: core :: primitive :: u8 ; 4usize] as :: scale :: Decode > :: decode (input) . map_err (| _ | :: ink_lang :: reflect :: DispatchError :: InvalidSelector) ? { < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [0usize] } > > :: SELECTOR => { :: core :: result :: Result :: Ok (Self :: Message0 (< < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [0usize] } > > :: Input as :: scale :: Decode > :: decode (input) . map_err (| _ | :: ink_lang :: reflect :: DispatchError :: InvalidParameters) ?)) } < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [1usize] } > > :: SELECTOR => { :: core :: result :: Result :: Ok (Self :: Message1 (< < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [1usize] } > > :: Input as :: scale :: Decode > :: decode (input) . map_err (| _ | :: ink_lang :: reflect :: DispatchError :: InvalidParameters) ?)) } < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [2usize] } > > :: SELECTOR => { :: core :: result :: Result :: Ok (Self :: Message2 (< < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [2usize] } > > :: Input as :: scale :: Decode > :: decode (input) . map_err (| _ | :: ink_lang :: reflect :: DispatchError :: InvalidParameters) ?)) } < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [3usize] } > > :: SELECTOR => { :: core :: result :: Result :: Ok (Self :: Message3 (< < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [3usize] } > > :: Input as :: scale :: Decode > :: decode (input) . map_err (| _ | :: ink_lang :: reflect :: DispatchError :: InvalidParameters) ?)) } < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [4usize] } > > :: SELECTOR => { :: core :: result :: Result :: Ok (Self :: Message4 (< < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [4usize] } > > :: Input as :: scale :: Decode > :: decode (input) . map_err (| _ | :: ink_lang :: reflect :: DispatchError :: InvalidParameters) ?)) } < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [5usize] } > > :: SELECTOR => { :: core :: result :: Result :: Ok (Self :: Message5 (< < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [5usize] } > > :: Input as :: scale :: Decode > :: decode (input) . map_err (| _ | :: ink_lang :: reflect :: DispatchError :: InvalidParameters) ?)) } < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [6usize] } > > :: SELECTOR => { :: core :: result :: Result :: Ok (Self :: Message6 (< < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [6usize] } > > :: Input as :: scale :: Decode > :: decode (input) . map_err (| _ | :: ink_lang :: reflect :: DispatchError :: InvalidParameters) ?)) } < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [7usize] } > > :: SELECTOR => { :: core :: result :: Result :: Ok (Self :: Message7 (< < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [7usize] } > > :: Input as :: scale :: Decode > :: decode (input) . map_err (| _ | :: ink_lang :: reflect :: DispatchError :: InvalidParameters) ?)) } < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [8usize] } > > :: SELECTOR => { :: core :: result :: Result :: Ok (Self :: Message8 (< < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [8usize] } > > :: Input as :: scale :: Decode > :: decode (input) . map_err (| _ | :: ink_lang :: reflect :: DispatchError :: InvalidParameters) ?)) } < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [9usize] } > > :: SELECTOR => { :: core :: result :: Result :: Ok (Self :: Message9 (< < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [9usize] } > > :: Input as :: scale :: Decode > :: decode (input) . map_err (| _ | :: ink_lang :: reflect :: DispatchError :: InvalidParameters) ?)) } < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [10usize] } > > :: SELECTOR => { :: core :: result :: Result :: Ok (Self :: Message10 (< < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [10usize] } > > :: Input as :: scale :: Decode > :: decode (input) . map_err (| _ | :: ink_lang :: reflect :: DispatchError :: InvalidParameters) ?)) } < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [11usize] } > > :: SELECTOR => { :: core :: result :: Result :: Ok (Self :: Message11 (< < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [11usize] } > > :: Input as :: scale :: Decode > :: decode (input) . map_err (| _ | :: ink_lang :: reflect :: DispatchError :: InvalidParameters) ?)) } < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [12usize] } > > :: SELECTOR => { :: core :: result :: Result :: Ok (Self :: Message12 (< < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [12usize] } > > :: Input as :: scale :: Decode > :: decode (input) . map_err (| _ | :: ink_lang :: reflect :: DispatchError :: InvalidParameters) ?)) } _invalid => :: core :: result :: Result :: Err (:: ink_lang :: reflect :: DispatchError :: UnknownSelector) , }
            }
        }
        impl ::scale::Decode for __ink_MessageDecoder {
            fn decode<I>(input: &mut I) -> ::core::result::Result<Self, ::scale::Error>
            where
                I: ::scale::Input,
            {
                <Self as ::ink_lang::reflect::DecodeDispatch>::decode_dispatch(input)
                    .map_err(::core::convert::Into::into)
            }
        }
        impl ::ink_lang::reflect::ExecuteDispatchable for __ink_MessageDecoder {
            #[allow(clippy::nonminimal_bool)]
            fn execute_dispatchable(
                self,
            ) -> ::core::result::Result<(), ::ink_lang::reflect::DispatchError> {
                match self {
                    Self::Message0(input) => {
                        ::ink_lang::codegen::execute_message::<
                            MyPSP22,
                            <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                                {
                                    <MyPSP22 as ::ink_lang::reflect::ContractDispatchableMessages<
                                        {
                                            < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES
                                        },
                                    >>::IDS[0usize]
                                },
                            >>::Output,
                            _,
                        >(
                            ::ink_lang::codegen::ExecuteMessageConfig {
                                payable: false
                                    || !{
                                        false || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [0usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [1usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [2usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [3usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [4usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [5usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [6usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [7usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [8usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [9usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [10usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [11usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [12usize] } > > :: PAYABLE
                                    }
                                    || <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                                        {
                                            < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [0usize]
                                        },
                                    >>::PAYABLE,
                                mutates:
                                    <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                                        {
                                            < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [0usize]
                                        },
                                    >>::MUTATES,
                                dynamic_storage_alloc: false,
                            },
                            move |storage: &mut MyPSP22| {
                                <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                                    {
                                        < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [0usize]
                                    },
                                >>::CALLABLE(storage, input)
                            },
                        )
                    }
                    Self::Message1(input) => {
                        ::ink_lang::codegen::execute_message::<
                            MyPSP22,
                            <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                                {
                                    <MyPSP22 as ::ink_lang::reflect::ContractDispatchableMessages<
                                        {
                                            < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES
                                        },
                                    >>::IDS[1usize]
                                },
                            >>::Output,
                            _,
                        >(
                            ::ink_lang::codegen::ExecuteMessageConfig {
                                payable: false
                                    || !{
                                        false || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [0usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [1usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [2usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [3usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [4usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [5usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [6usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [7usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [8usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [9usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [10usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [11usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [12usize] } > > :: PAYABLE
                                    }
                                    || <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                                        {
                                            < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [1usize]
                                        },
                                    >>::PAYABLE,
                                mutates:
                                    <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                                        {
                                            < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [1usize]
                                        },
                                    >>::MUTATES,
                                dynamic_storage_alloc: false,
                            },
                            move |storage: &mut MyPSP22| {
                                <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                                    {
                                        < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [1usize]
                                    },
                                >>::CALLABLE(storage, input)
                            },
                        )
                    }
                    Self::Message2(input) => {
                        ::ink_lang::codegen::execute_message::<
                            MyPSP22,
                            <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                                {
                                    <MyPSP22 as ::ink_lang::reflect::ContractDispatchableMessages<
                                        {
                                            < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES
                                        },
                                    >>::IDS[2usize]
                                },
                            >>::Output,
                            _,
                        >(
                            ::ink_lang::codegen::ExecuteMessageConfig {
                                payable: false
                                    || !{
                                        false || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [0usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [1usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [2usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [3usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [4usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [5usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [6usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [7usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [8usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [9usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [10usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [11usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [12usize] } > > :: PAYABLE
                                    }
                                    || <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                                        {
                                            < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [2usize]
                                        },
                                    >>::PAYABLE,
                                mutates:
                                    <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                                        {
                                            < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [2usize]
                                        },
                                    >>::MUTATES,
                                dynamic_storage_alloc: false,
                            },
                            move |storage: &mut MyPSP22| {
                                <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                                    {
                                        < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [2usize]
                                    },
                                >>::CALLABLE(storage, input)
                            },
                        )
                    }
                    Self::Message3(input) => {
                        ::ink_lang::codegen::execute_message::<
                            MyPSP22,
                            <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                                {
                                    <MyPSP22 as ::ink_lang::reflect::ContractDispatchableMessages<
                                        {
                                            < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES
                                        },
                                    >>::IDS[3usize]
                                },
                            >>::Output,
                            _,
                        >(
                            ::ink_lang::codegen::ExecuteMessageConfig {
                                payable: false
                                    || !{
                                        false || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [0usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [1usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [2usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [3usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [4usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [5usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [6usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [7usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [8usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [9usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [10usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [11usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [12usize] } > > :: PAYABLE
                                    }
                                    || <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                                        {
                                            < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [3usize]
                                        },
                                    >>::PAYABLE,
                                mutates:
                                    <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                                        {
                                            < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [3usize]
                                        },
                                    >>::MUTATES,
                                dynamic_storage_alloc: false,
                            },
                            move |storage: &mut MyPSP22| {
                                <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                                    {
                                        < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [3usize]
                                    },
                                >>::CALLABLE(storage, input)
                            },
                        )
                    }
                    Self::Message4(input) => {
                        ::ink_lang::codegen::execute_message::<
                            MyPSP22,
                            <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                                {
                                    <MyPSP22 as ::ink_lang::reflect::ContractDispatchableMessages<
                                        {
                                            < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES
                                        },
                                    >>::IDS[4usize]
                                },
                            >>::Output,
                            _,
                        >(
                            ::ink_lang::codegen::ExecuteMessageConfig {
                                payable: false
                                    || !{
                                        false || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [0usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [1usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [2usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [3usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [4usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [5usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [6usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [7usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [8usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [9usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [10usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [11usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [12usize] } > > :: PAYABLE
                                    }
                                    || <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                                        {
                                            < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [4usize]
                                        },
                                    >>::PAYABLE,
                                mutates:
                                    <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                                        {
                                            < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [4usize]
                                        },
                                    >>::MUTATES,
                                dynamic_storage_alloc: false,
                            },
                            move |storage: &mut MyPSP22| {
                                <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                                    {
                                        < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [4usize]
                                    },
                                >>::CALLABLE(storage, input)
                            },
                        )
                    }
                    Self::Message5(input) => {
                        ::ink_lang::codegen::execute_message::<
                            MyPSP22,
                            <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                                {
                                    <MyPSP22 as ::ink_lang::reflect::ContractDispatchableMessages<
                                        {
                                            < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES
                                        },
                                    >>::IDS[5usize]
                                },
                            >>::Output,
                            _,
                        >(
                            ::ink_lang::codegen::ExecuteMessageConfig {
                                payable: false
                                    || !{
                                        false || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [0usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [1usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [2usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [3usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [4usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [5usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [6usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [7usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [8usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [9usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [10usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [11usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [12usize] } > > :: PAYABLE
                                    }
                                    || <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                                        {
                                            < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [5usize]
                                        },
                                    >>::PAYABLE,
                                mutates:
                                    <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                                        {
                                            < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [5usize]
                                        },
                                    >>::MUTATES,
                                dynamic_storage_alloc: false,
                            },
                            move |storage: &mut MyPSP22| {
                                <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                                    {
                                        < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [5usize]
                                    },
                                >>::CALLABLE(storage, input)
                            },
                        )
                    }
                    Self::Message6(input) => {
                        ::ink_lang::codegen::execute_message::<
                            MyPSP22,
                            <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                                {
                                    <MyPSP22 as ::ink_lang::reflect::ContractDispatchableMessages<
                                        {
                                            < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES
                                        },
                                    >>::IDS[6usize]
                                },
                            >>::Output,
                            _,
                        >(
                            ::ink_lang::codegen::ExecuteMessageConfig {
                                payable: false
                                    || !{
                                        false || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [0usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [1usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [2usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [3usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [4usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [5usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [6usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [7usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [8usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [9usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [10usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [11usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [12usize] } > > :: PAYABLE
                                    }
                                    || <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                                        {
                                            < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [6usize]
                                        },
                                    >>::PAYABLE,
                                mutates:
                                    <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                                        {
                                            < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [6usize]
                                        },
                                    >>::MUTATES,
                                dynamic_storage_alloc: false,
                            },
                            move |storage: &mut MyPSP22| {
                                <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                                    {
                                        < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [6usize]
                                    },
                                >>::CALLABLE(storage, input)
                            },
                        )
                    }
                    Self::Message7(input) => {
                        ::ink_lang::codegen::execute_message::<
                            MyPSP22,
                            <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                                {
                                    <MyPSP22 as ::ink_lang::reflect::ContractDispatchableMessages<
                                        {
                                            < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES
                                        },
                                    >>::IDS[7usize]
                                },
                            >>::Output,
                            _,
                        >(
                            ::ink_lang::codegen::ExecuteMessageConfig {
                                payable: false
                                    || !{
                                        false || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [0usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [1usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [2usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [3usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [4usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [5usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [6usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [7usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [8usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [9usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [10usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [11usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [12usize] } > > :: PAYABLE
                                    }
                                    || <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                                        {
                                            < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [7usize]
                                        },
                                    >>::PAYABLE,
                                mutates:
                                    <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                                        {
                                            < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [7usize]
                                        },
                                    >>::MUTATES,
                                dynamic_storage_alloc: false,
                            },
                            move |storage: &mut MyPSP22| {
                                <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                                    {
                                        < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [7usize]
                                    },
                                >>::CALLABLE(storage, input)
                            },
                        )
                    }
                    Self::Message8(input) => {
                        ::ink_lang::codegen::execute_message::<
                            MyPSP22,
                            <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                                {
                                    <MyPSP22 as ::ink_lang::reflect::ContractDispatchableMessages<
                                        {
                                            < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES
                                        },
                                    >>::IDS[8usize]
                                },
                            >>::Output,
                            _,
                        >(
                            ::ink_lang::codegen::ExecuteMessageConfig {
                                payable: false
                                    || !{
                                        false || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [0usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [1usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [2usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [3usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [4usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [5usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [6usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [7usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [8usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [9usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [10usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [11usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [12usize] } > > :: PAYABLE
                                    }
                                    || <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                                        {
                                            < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [8usize]
                                        },
                                    >>::PAYABLE,
                                mutates:
                                    <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                                        {
                                            < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [8usize]
                                        },
                                    >>::MUTATES,
                                dynamic_storage_alloc: false,
                            },
                            move |storage: &mut MyPSP22| {
                                <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                                    {
                                        < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [8usize]
                                    },
                                >>::CALLABLE(storage, input)
                            },
                        )
                    }
                    Self::Message9(input) => {
                        ::ink_lang::codegen::execute_message::<
                            MyPSP22,
                            <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                                {
                                    <MyPSP22 as ::ink_lang::reflect::ContractDispatchableMessages<
                                        {
                                            < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES
                                        },
                                    >>::IDS[9usize]
                                },
                            >>::Output,
                            _,
                        >(
                            ::ink_lang::codegen::ExecuteMessageConfig {
                                payable: false
                                    || !{
                                        false || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [0usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [1usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [2usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [3usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [4usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [5usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [6usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [7usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [8usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [9usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [10usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [11usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [12usize] } > > :: PAYABLE
                                    }
                                    || <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                                        {
                                            < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [9usize]
                                        },
                                    >>::PAYABLE,
                                mutates:
                                    <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                                        {
                                            < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [9usize]
                                        },
                                    >>::MUTATES,
                                dynamic_storage_alloc: false,
                            },
                            move |storage: &mut MyPSP22| {
                                <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                                    {
                                        < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [9usize]
                                    },
                                >>::CALLABLE(storage, input)
                            },
                        )
                    }
                    Self::Message10(input) => {
                        ::ink_lang::codegen::execute_message::<
                            MyPSP22,
                            <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                                {
                                    <MyPSP22 as ::ink_lang::reflect::ContractDispatchableMessages<
                                        {
                                            < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES
                                        },
                                    >>::IDS[10usize]
                                },
                            >>::Output,
                            _,
                        >(
                            ::ink_lang::codegen::ExecuteMessageConfig {
                                payable: false
                                    || !{
                                        false || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [0usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [1usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [2usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [3usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [4usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [5usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [6usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [7usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [8usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [9usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [10usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [11usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [12usize] } > > :: PAYABLE
                                    }
                                    || <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                                        {
                                            < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [10usize]
                                        },
                                    >>::PAYABLE,
                                mutates:
                                    <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                                        {
                                            < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [10usize]
                                        },
                                    >>::MUTATES,
                                dynamic_storage_alloc: false,
                            },
                            move |storage: &mut MyPSP22| {
                                <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                                    {
                                        < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [10usize]
                                    },
                                >>::CALLABLE(storage, input)
                            },
                        )
                    }
                    Self::Message11(input) => {
                        ::ink_lang::codegen::execute_message::<
                            MyPSP22,
                            <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                                {
                                    <MyPSP22 as ::ink_lang::reflect::ContractDispatchableMessages<
                                        {
                                            < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES
                                        },
                                    >>::IDS[11usize]
                                },
                            >>::Output,
                            _,
                        >(
                            ::ink_lang::codegen::ExecuteMessageConfig {
                                payable: false
                                    || !{
                                        false || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [0usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [1usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [2usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [3usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [4usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [5usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [6usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [7usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [8usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [9usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [10usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [11usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [12usize] } > > :: PAYABLE
                                    }
                                    || <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                                        {
                                            < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [11usize]
                                        },
                                    >>::PAYABLE,
                                mutates:
                                    <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                                        {
                                            < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [11usize]
                                        },
                                    >>::MUTATES,
                                dynamic_storage_alloc: false,
                            },
                            move |storage: &mut MyPSP22| {
                                <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                                    {
                                        < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [11usize]
                                    },
                                >>::CALLABLE(storage, input)
                            },
                        )
                    }
                    Self::Message12(input) => {
                        ::ink_lang::codegen::execute_message::<
                            MyPSP22,
                            <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                                {
                                    <MyPSP22 as ::ink_lang::reflect::ContractDispatchableMessages<
                                        {
                                            < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES
                                        },
                                    >>::IDS[12usize]
                                },
                            >>::Output,
                            _,
                        >(
                            ::ink_lang::codegen::ExecuteMessageConfig {
                                payable: false
                                    || !{
                                        false || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [0usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [1usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [2usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [3usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [4usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [5usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [6usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [7usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [8usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [9usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [10usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [11usize] } > > :: PAYABLE || < MyPSP22 as :: ink_lang :: reflect :: DispatchableMessageInfo < { < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [12usize] } > > :: PAYABLE
                                    }
                                    || <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                                        {
                                            < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [12usize]
                                        },
                                    >>::PAYABLE,
                                mutates:
                                    <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                                        {
                                            < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [12usize]
                                        },
                                    >>::MUTATES,
                                dynamic_storage_alloc: false,
                            },
                            move |storage: &mut MyPSP22| {
                                <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                                    {
                                        < MyPSP22 as :: ink_lang :: reflect :: ContractDispatchableMessages < { < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES } > > :: IDS [12usize]
                                    },
                                >>::CALLABLE(storage, input)
                            },
                        )
                    }
                }
            }
        }
        impl ::ink_lang::reflect::ContractMessageDecoder for MyPSP22 {
            type Type = __ink_MessageDecoder;
        }
    };
    #[cfg(not(test))]
    #[cfg(not(feature = "ink-as-dependency"))]
    const _: () = {
        #[cfg(not(test))]
        #[no_mangle]
        fn deploy() {
            :: ink_env :: decode_input :: < < MyPSP22 as :: ink_lang :: reflect :: ContractConstructorDecoder > :: Type > () . map_err (| _ | :: ink_lang :: reflect :: DispatchError :: CouldNotReadInput) . and_then (| decoder | { < < MyPSP22 as :: ink_lang :: reflect :: ContractConstructorDecoder > :: Type as :: ink_lang :: reflect :: ExecuteDispatchable > :: execute_dispatchable (decoder) }) . unwrap_or_else (| error | { :: core :: panicking :: panic_fmt (:: core :: fmt :: Arguments :: new_v1 (& ["dispatching ink! constructor failed: "] , & match (& error ,) { (arg0 ,) => [:: core :: fmt :: ArgumentV1 :: new (arg0 , :: core :: fmt :: Display :: fmt)] , })) })
        }
        #[cfg(not(test))]
        #[no_mangle]
        fn call() {
            if !{
                false
                    || <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                        {
                            <MyPSP22 as ::ink_lang::reflect::ContractDispatchableMessages<
                                {
                                    < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES
                                },
                            >>::IDS[0usize]
                        },
                    >>::PAYABLE
                    || <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                        {
                            <MyPSP22 as ::ink_lang::reflect::ContractDispatchableMessages<
                                {
                                    < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES
                                },
                            >>::IDS[1usize]
                        },
                    >>::PAYABLE
                    || <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                        {
                            <MyPSP22 as ::ink_lang::reflect::ContractDispatchableMessages<
                                {
                                    < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES
                                },
                            >>::IDS[2usize]
                        },
                    >>::PAYABLE
                    || <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                        {
                            <MyPSP22 as ::ink_lang::reflect::ContractDispatchableMessages<
                                {
                                    < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES
                                },
                            >>::IDS[3usize]
                        },
                    >>::PAYABLE
                    || <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                        {
                            <MyPSP22 as ::ink_lang::reflect::ContractDispatchableMessages<
                                {
                                    < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES
                                },
                            >>::IDS[4usize]
                        },
                    >>::PAYABLE
                    || <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                        {
                            <MyPSP22 as ::ink_lang::reflect::ContractDispatchableMessages<
                                {
                                    < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES
                                },
                            >>::IDS[5usize]
                        },
                    >>::PAYABLE
                    || <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                        {
                            <MyPSP22 as ::ink_lang::reflect::ContractDispatchableMessages<
                                {
                                    < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES
                                },
                            >>::IDS[6usize]
                        },
                    >>::PAYABLE
                    || <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                        {
                            <MyPSP22 as ::ink_lang::reflect::ContractDispatchableMessages<
                                {
                                    < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES
                                },
                            >>::IDS[7usize]
                        },
                    >>::PAYABLE
                    || <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                        {
                            <MyPSP22 as ::ink_lang::reflect::ContractDispatchableMessages<
                                {
                                    < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES
                                },
                            >>::IDS[8usize]
                        },
                    >>::PAYABLE
                    || <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                        {
                            <MyPSP22 as ::ink_lang::reflect::ContractDispatchableMessages<
                                {
                                    < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES
                                },
                            >>::IDS[9usize]
                        },
                    >>::PAYABLE
                    || <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                        {
                            <MyPSP22 as ::ink_lang::reflect::ContractDispatchableMessages<
                                {
                                    < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES
                                },
                            >>::IDS[10usize]
                        },
                    >>::PAYABLE
                    || <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                        {
                            <MyPSP22 as ::ink_lang::reflect::ContractDispatchableMessages<
                                {
                                    < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES
                                },
                            >>::IDS[11usize]
                        },
                    >>::PAYABLE
                    || <MyPSP22 as ::ink_lang::reflect::DispatchableMessageInfo<
                        {
                            <MyPSP22 as ::ink_lang::reflect::ContractDispatchableMessages<
                                {
                                    < MyPSP22 as :: ink_lang :: reflect :: ContractAmountDispatchables > :: MESSAGES
                                },
                            >>::IDS[12usize]
                        },
                    >>::PAYABLE
            } {
                ::ink_lang::codegen::deny_payment::<
                    <MyPSP22 as ::ink_lang::reflect::ContractEnv>::Env,
                >()
                .unwrap_or_else(|error| ::core::panicking::panic_display(&error))
            }
            :: ink_env :: decode_input :: < < MyPSP22 as :: ink_lang :: reflect :: ContractMessageDecoder > :: Type > () . map_err (| _ | :: ink_lang :: reflect :: DispatchError :: CouldNotReadInput) . and_then (| decoder | { < < MyPSP22 as :: ink_lang :: reflect :: ContractMessageDecoder > :: Type as :: ink_lang :: reflect :: ExecuteDispatchable > :: execute_dispatchable (decoder) }) . unwrap_or_else (| error | { :: core :: panicking :: panic_fmt (:: core :: fmt :: Arguments :: new_v1 (& ["dispatching ink! message failed: "] , & match (& error ,) { (arg0 ,) => [:: core :: fmt :: ArgumentV1 :: new (arg0 , :: core :: fmt :: Display :: fmt)] , })) })
        }
    };
    const _: () = { use :: ink_lang :: codegen :: { Env as _ , StaticEnv as _ } ; const _ : :: ink_lang :: codegen :: utils :: IsSameType < MyPSP22 > = :: ink_lang :: codegen :: utils :: IsSameType :: < MyPSP22 > :: new () ; impl __brush_external_PSP22 :: PSP22 for MyPSP22 { type __ink_TraitInfo = < :: ink_lang :: reflect :: TraitDefinitionRegistry < Environment > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo ; type AllowanceOutput = Balance ; # [doc = " Returns the amount which `spender` is still allowed to withdraw from `owner`."] # [doc = ""] # [doc = " Returns `0` if no allowance has been set `0`."] fn allowance (& self , owner : AccountId , spender : AccountId) -> Self :: AllowanceOutput { PSP22 :: allowance (self , owner , spender) } type BalanceOfOutput = Balance ; # [doc = " Returns the account Balance for the specified `owner`."] # [doc = ""] # [doc = " Returns `0` if the account is non-existent."] fn balance_of (& self , owner : AccountId) -> Self :: BalanceOfOutput { PSP22 :: balance_of (self , owner) } type IncreaseAllowanceOutput = Result < () , PSP22Error > ; # [doc = " Atomically increases the allowance granted to `spender` by the caller."] # [doc = ""] # [doc = " An `Approval` event is emitted."] # [doc = ""] # [doc = " # Errors"] # [doc = ""] # [doc = " Panics `ZeroSenderAddress` error if sender\'s address is zero."] # [doc = ""] # [doc = " Panics `ZeroRecipientAddress` error if recipient\'s address is zero."] fn increase_allowance (& mut self , spender : AccountId , delta_value : Balance) -> Self :: IncreaseAllowanceOutput { PSP22 :: increase_allowance (self , spender , delta_value) } type TotalSupplyOutput = Balance ; # [doc = " Returns the total token supply."] fn total_supply (& self) -> Self :: TotalSupplyOutput { PSP22 :: total_supply (self) } type TransferOutput = Result < () , PSP22Error > ; # [doc = " Transfers `value` amount of tokens from the caller\'s account to account `to`"] # [doc = " with additional `data` in unspecified format."] # [doc = ""] # [doc = " On success a `Transfer` event is emitted."] # [doc = ""] # [doc = " # Errors"] # [doc = ""] # [doc = " Panics `InsufficientBalance` error if there are not enough tokens on"] # [doc = " the caller\'s account Balance."] # [doc = ""] # [doc = " Panics `ZeroSenderAddress` error if sender\'s address is zero."] # [doc = ""] # [doc = " Panics `ZeroRecipientAddress` error if recipient\'s address is zero."] fn transfer (& mut self , to : AccountId , value : Balance , data : Vec < u8 >) -> Self :: TransferOutput { PSP22 :: transfer (self , to , value , data) } type TransferFromOutput = Result < () , PSP22Error > ; # [doc = " Transfers `value` tokens on the behalf of `from` to the account `to`"] # [doc = " with additional `data` in unspecified format."] # [doc = ""] # [doc = " This can be used to allow a contract to transfer tokens on ones behalf and/or"] # [doc = " to charge fees in sub-currencies, for example."] # [doc = ""] # [doc = " On success a `Transfer` and `Approval` events are emitted."] # [doc = ""] # [doc = " # Errors"] # [doc = ""] # [doc = " Panics `InsufficientAllowance` error if there are not enough tokens allowed"] # [doc = " for the caller to withdraw from `from`."] # [doc = ""] # [doc = " Panics `InsufficientBalance` error if there are not enough tokens on"] # [doc = " the the account Balance of `from`."] # [doc = ""] # [doc = " Panics `ZeroSenderAddress` error if sender\'s address is zero."] # [doc = ""] # [doc = " Panics `ZeroRecipientAddress` error if recipient\'s address is zero."] fn transfer_from (& mut self , from : AccountId , to : AccountId , value : Balance , data : Vec < u8 >) -> Self :: TransferFromOutput { PSP22 :: transfer_from (self , from , to , value , data) } type ApproveOutput = Result < () , PSP22Error > ; # [doc = " Allows `spender` to withdraw from the caller\'s account multiple times, up to"] # [doc = " the `value` amount."] # [doc = ""] # [doc = " If this function is called again it overwrites the current allowance with `value`."] # [doc = ""] # [doc = " An `Approval` event is emitted."] # [doc = ""] # [doc = " # Errors"] # [doc = ""] # [doc = " Panics `ZeroSenderAddress` error if sender\'s address is zero."] # [doc = ""] # [doc = " Panics `ZeroRecipientAddress` error if recipient\'s address is zero."] fn approve (& mut self , spender : AccountId , value : Balance) -> Self :: ApproveOutput { PSP22 :: approve (self , spender , value) } type DecreaseAllowanceOutput = Result < () , PSP22Error > ; # [doc = " Atomically decreases the allowance granted to `spender` by the caller."] # [doc = ""] # [doc = " An `Approval` event is emitted."] # [doc = ""] # [doc = " # Errors"] # [doc = ""] # [doc = " Panics `InsufficientAllowance` error if there are not enough tokens allowed"] # [doc = " by owner for `spender`."] # [doc = ""] # [doc = " Panics `ZeroSenderAddress` error if sender\'s address is zero."] # [doc = ""] # [doc = " Panics `ZeroRecipientAddress` error if recipient\'s address is zero."] fn decrease_allowance (& mut self , spender : AccountId , delta_value : Balance) -> Self :: DecreaseAllowanceOutput { PSP22 :: decrease_allowance (self , spender , delta_value) } } const _ : :: ink_lang :: codegen :: utils :: IsSameType < MyPSP22 > = :: ink_lang :: codegen :: utils :: IsSameType :: < MyPSP22 > :: new () ; impl __brush_external_PSP22Metadata :: PSP22Metadata for MyPSP22 { type __ink_TraitInfo = < :: ink_lang :: reflect :: TraitDefinitionRegistry < Environment > as __brush_external_PSP22Metadata :: PSP22Metadata > :: __ink_TraitInfo ; type TokenNameOutput = Option < String > ; # [doc = " Returns the token name."] fn token_name (& self) -> Self :: TokenNameOutput { PSP22Metadata :: token_name (self) } type TokenSymbolOutput = Option < String > ; # [doc = " Returns the token symbol."] fn token_symbol (& self) -> Self :: TokenSymbolOutput { PSP22Metadata :: token_symbol (self) } type TokenDecimalsOutput = u8 ; # [doc = " Returns the token decimals."] fn token_decimals (& self) -> Self :: TokenDecimalsOutput { PSP22Metadata :: token_decimals (self) } } const _ : :: ink_lang :: codegen :: utils :: IsSameType < MyPSP22 > = :: ink_lang :: codegen :: utils :: IsSameType :: < MyPSP22 > :: new () ; impl MyPSP22 { pub fn new (total_supply : Balance , name : Option < String > , symbol : Option < String > , decimal : u8) -> Self { let mut instance = Self :: default () ; Lazy :: set (& mut instance . metadata . name , name) ; Lazy :: set (& mut instance . metadata . symbol , symbol) ; Lazy :: set (& mut instance . metadata . decimals , decimal) ; instance . _mint (instance . env () . caller () , total_supply) ; instance } pub fn set_hated_account (& mut self , hated : AccountId) { self . hated_account = hated ; } pub fn get_hated_account (& self) -> AccountId { self . hated_account . clone () } } const _ : () = { let _ : () = :: ink_lang :: codegen :: utils :: consume_type :: < :: ink_lang :: codegen :: DispatchInput < Balance > > () ; let _ : () = :: ink_lang :: codegen :: utils :: consume_type :: < :: ink_lang :: codegen :: DispatchInput < Option < String > > > () ; let _ : () = :: ink_lang :: codegen :: utils :: consume_type :: < :: ink_lang :: codegen :: DispatchInput < Option < String > > > () ; let _ : () = :: ink_lang :: codegen :: utils :: consume_type :: < :: ink_lang :: codegen :: DispatchInput < u8 > > () ; let _ : () = :: ink_lang :: codegen :: utils :: consume_type :: < :: ink_lang :: codegen :: DispatchInput < AccountId > > () ; let _ : () = :: ink_lang :: codegen :: utils :: consume_type :: < :: ink_lang :: codegen :: DispatchInput < AccountId > > () ; let _ : () = :: ink_lang :: codegen :: utils :: consume_type :: < :: ink_lang :: codegen :: DispatchOutput < Balance > > () ; let _ : () = :: ink_lang :: codegen :: utils :: consume_type :: < :: ink_lang :: codegen :: DispatchInput < AccountId > > () ; let _ : () = :: ink_lang :: codegen :: utils :: consume_type :: < :: ink_lang :: codegen :: DispatchOutput < Balance > > () ; let _ : () = :: ink_lang :: codegen :: utils :: consume_type :: < :: ink_lang :: codegen :: DispatchInput < AccountId > > () ; let _ : () = :: ink_lang :: codegen :: utils :: consume_type :: < :: ink_lang :: codegen :: DispatchInput < Balance > > () ; let _ : () = :: ink_lang :: codegen :: utils :: consume_type :: < :: ink_lang :: codegen :: DispatchOutput < Result < () , PSP22Error > > > () ; let _ : () = :: ink_lang :: codegen :: utils :: consume_type :: < :: ink_lang :: codegen :: DispatchOutput < Balance > > () ; let _ : () = :: ink_lang :: codegen :: utils :: consume_type :: < :: ink_lang :: codegen :: DispatchInput < AccountId > > () ; let _ : () = :: ink_lang :: codegen :: utils :: consume_type :: < :: ink_lang :: codegen :: DispatchInput < Balance > > () ; let _ : () = :: ink_lang :: codegen :: utils :: consume_type :: < :: ink_lang :: codegen :: DispatchInput < Vec < u8 > > > () ; let _ : () = :: ink_lang :: codegen :: utils :: consume_type :: < :: ink_lang :: codegen :: DispatchOutput < Result < () , PSP22Error > > > () ; let _ : () = :: ink_lang :: codegen :: utils :: consume_type :: < :: ink_lang :: codegen :: DispatchInput < AccountId > > () ; let _ : () = :: ink_lang :: codegen :: utils :: consume_type :: < :: ink_lang :: codegen :: DispatchInput < AccountId > > () ; let _ : () = :: ink_lang :: codegen :: utils :: consume_type :: < :: ink_lang :: codegen :: DispatchInput < Balance > > () ; let _ : () = :: ink_lang :: codegen :: utils :: consume_type :: < :: ink_lang :: codegen :: DispatchInput < Vec < u8 > > > () ; let _ : () = :: ink_lang :: codegen :: utils :: consume_type :: < :: ink_lang :: codegen :: DispatchOutput < Result < () , PSP22Error > > > () ; let _ : () = :: ink_lang :: codegen :: utils :: consume_type :: < :: ink_lang :: codegen :: DispatchInput < AccountId > > () ; let _ : () = :: ink_lang :: codegen :: utils :: consume_type :: < :: ink_lang :: codegen :: DispatchInput < Balance > > () ; let _ : () = :: ink_lang :: codegen :: utils :: consume_type :: < :: ink_lang :: codegen :: DispatchOutput < Result < () , PSP22Error > > > () ; let _ : () = :: ink_lang :: codegen :: utils :: consume_type :: < :: ink_lang :: codegen :: DispatchInput < AccountId > > () ; let _ : () = :: ink_lang :: codegen :: utils :: consume_type :: < :: ink_lang :: codegen :: DispatchInput < Balance > > () ; let _ : () = :: ink_lang :: codegen :: utils :: consume_type :: < :: ink_lang :: codegen :: DispatchOutput < Result < () , PSP22Error > > > () ; let _ : () = :: ink_lang :: codegen :: utils :: consume_type :: < :: ink_lang :: codegen :: DispatchOutput < Option < String > > > () ; let _ : () = :: ink_lang :: codegen :: utils :: consume_type :: < :: ink_lang :: codegen :: DispatchOutput < Option < String > > > () ; let _ : () = :: ink_lang :: codegen :: utils :: consume_type :: < :: ink_lang :: codegen :: DispatchOutput < u8 > > () ; let _ : () = :: ink_lang :: codegen :: utils :: consume_type :: < :: ink_lang :: codegen :: DispatchInput < AccountId > > () ; let _ : () = :: ink_lang :: codegen :: utils :: consume_type :: < :: ink_lang :: codegen :: DispatchOutput < AccountId > > () ; } ; };
    const _: () = { # [doc = r" The ink! smart contract's call builder."] # [doc = r""] # [doc = r" Implements the underlying on-chain calling of the ink! smart contract"] # [doc = r" messages and trait implementations in a type safe way."] # [repr (transparent)] pub struct CallBuilder { account_id : AccountId , } # [automatically_derived] # [allow (unused_qualifications)] impl :: core :: fmt :: Debug for CallBuilder { fn fmt (& self , f : & mut :: core :: fmt :: Formatter) -> :: core :: fmt :: Result { match * self { CallBuilder { account_id : ref __self_0_0 } => { let debug_trait_builder = & mut :: core :: fmt :: Formatter :: debug_struct (f , "CallBuilder") ; let _ = :: core :: fmt :: DebugStruct :: field (debug_trait_builder , "account_id" , & & (* __self_0_0)) ; :: core :: fmt :: DebugStruct :: finish (debug_trait_builder) } } } } const _ : () = { impl :: ink_storage :: traits :: SpreadLayout for CallBuilder { # [allow (unused_comparisons)] const FOOTPRINT : :: core :: primitive :: u64 = [(0u64 + < AccountId as :: ink_storage :: traits :: SpreadLayout > :: FOOTPRINT) , 0u64] [((0u64 + < AccountId as :: ink_storage :: traits :: SpreadLayout > :: FOOTPRINT) < 0u64) as :: core :: primitive :: usize] ; const REQUIRES_DEEP_CLEAN_UP : :: core :: primitive :: bool = (false || (false || < AccountId as :: ink_storage :: traits :: SpreadLayout > :: REQUIRES_DEEP_CLEAN_UP)) ; fn pull_spread (__key_ptr : & mut :: ink_storage :: traits :: KeyPtr) -> Self { CallBuilder { account_id : < AccountId as :: ink_storage :: traits :: SpreadLayout > :: pull_spread (__key_ptr) , } } fn push_spread (& self , __key_ptr : & mut :: ink_storage :: traits :: KeyPtr) { match self { CallBuilder { account_id : __binding_0 } => { { :: ink_storage :: traits :: SpreadLayout :: push_spread (__binding_0 , __key_ptr) ; } } } } fn clear_spread (& self , __key_ptr : & mut :: ink_storage :: traits :: KeyPtr) { match self { CallBuilder { account_id : __binding_0 } => { { :: ink_storage :: traits :: SpreadLayout :: clear_spread (__binding_0 , __key_ptr) ; } } } } } } ; const _ : () = { impl :: ink_storage :: traits :: PackedLayout for CallBuilder { fn pull_packed (& mut self , __key : & :: ink_primitives :: Key) { match self { CallBuilder { account_id : __binding_0 } => { { :: ink_storage :: traits :: PackedLayout :: pull_packed (__binding_0 , __key) ; } } } } fn push_packed (& self , __key : & :: ink_primitives :: Key) { match self { CallBuilder { account_id : __binding_0 } => { { :: ink_storage :: traits :: PackedLayout :: push_packed (__binding_0 , __key) ; } } } } fn clear_packed (& self , __key : & :: ink_primitives :: Key) { match self { CallBuilder { account_id : __binding_0 } => { { :: ink_storage :: traits :: PackedLayout :: clear_packed (__binding_0 , __key) ; } } } } } } ; const _ : () = { impl :: scale :: Encode for CallBuilder { fn encode_to < __CodecOutputEdqy : :: scale :: Output + ? :: core :: marker :: Sized > (& self , __codec_dest_edqy : & mut __CodecOutputEdqy) { :: scale :: Encode :: encode_to (& & self . account_id , __codec_dest_edqy) } fn encode (& self) -> :: scale :: alloc :: vec :: Vec < :: core :: primitive :: u8 > { :: scale :: Encode :: encode (& & self . account_id) } fn using_encoded < R , F : :: core :: ops :: FnOnce (& [:: core :: primitive :: u8]) -> R > (& self , f : F) -> R { :: scale :: Encode :: using_encoded (& & self . account_id , f) } } impl :: scale :: EncodeLike for CallBuilder { } } ; const _ : () = { impl :: scale :: Decode for CallBuilder { fn decode < __CodecInputEdqy : :: scale :: Input > (__codec_input_edqy : & mut __CodecInputEdqy) -> :: core :: result :: Result < Self , :: scale :: Error > { :: core :: result :: Result :: Ok (CallBuilder { account_id : { let __codec_res_edqy = < AccountId as :: scale :: Decode > :: decode (__codec_input_edqy) ; match __codec_res_edqy { :: core :: result :: Result :: Err (e) => return :: core :: result :: Result :: Err (e . chain ("Could not decode `CallBuilder::account_id`")) , :: core :: result :: Result :: Ok (__codec_res_edqy) => __codec_res_edqy , } } , }) } } } ; # [automatically_derived] # [allow (unused_qualifications)] impl :: core :: hash :: Hash for CallBuilder { fn hash < __H : :: core :: hash :: Hasher > (& self , state : & mut __H) -> () { match * self { CallBuilder { account_id : ref __self_0_0 } => { :: core :: hash :: Hash :: hash (& (* __self_0_0) , state) } } } } impl :: core :: marker :: StructuralPartialEq for CallBuilder { } # [automatically_derived] # [allow (unused_qualifications)] impl :: core :: cmp :: PartialEq for CallBuilder { # [inline] fn eq (& self , other : & CallBuilder) -> bool { match * other { CallBuilder { account_id : ref __self_1_0 } => match * self { CallBuilder { account_id : ref __self_0_0 } => (* __self_0_0) == (* __self_1_0) , } , } } # [inline] fn ne (& self , other : & CallBuilder) -> bool { match * other { CallBuilder { account_id : ref __self_1_0 } => match * self { CallBuilder { account_id : ref __self_0_0 } => (* __self_0_0) != (* __self_1_0) , } , } } } impl :: core :: marker :: StructuralEq for CallBuilder { } # [automatically_derived] # [allow (unused_qualifications)] impl :: core :: cmp :: Eq for CallBuilder { # [inline] # [doc (hidden)] # [no_coverage] fn assert_receiver_is_total_eq (& self) -> () { { let _ : :: core :: cmp :: AssertParamIsEq < AccountId > ; } } } # [automatically_derived] # [allow (unused_qualifications)] impl :: core :: clone :: Clone for CallBuilder { # [inline] fn clone (& self) -> CallBuilder { match * self { CallBuilder { account_id : ref __self_0_0 } => CallBuilder { account_id : :: core :: clone :: Clone :: clone (& (* __self_0_0)) , } , } } } # [allow (non_upper_case_globals , unused_attributes , unused_qualifications)] const _ : () = { impl :: scale_info :: TypeInfo for CallBuilder { type Identity = Self ; fn type_info () -> :: scale_info :: Type { :: scale_info :: Type :: builder () . path (:: scale_info :: Path :: new ("CallBuilder" , "my_psp22::my_psp22")) . type_params (:: alloc :: vec :: Vec :: new ()) . docs (& ["The ink! smart contract\'s call builder." , "" , "Implements the underlying on-chain calling of the ink! smart contract" , "messages and trait implementations in a type safe way."]) . composite (:: scale_info :: build :: Fields :: named () . field (| f | f . ty :: < AccountId > () . name ("account_id") . type_name ("AccountId") . docs (& []))) } } ; } ; const _ : () = { impl :: ink_storage :: traits :: StorageLayout for CallBuilder { fn layout (__key_ptr : & mut :: ink_storage :: traits :: KeyPtr) -> :: ink_metadata :: layout :: Layout { :: ink_metadata :: layout :: Layout :: Struct (:: ink_metadata :: layout :: StructLayout :: new ([:: ink_metadata :: layout :: FieldLayout :: new (:: core :: option :: Option :: Some ("account_id") , < AccountId as :: ink_storage :: traits :: StorageLayout > :: layout (__key_ptr))])) } } } ; const _ : () = { impl :: ink_lang :: codegen :: ContractCallBuilder for MyPSP22 { type Type = CallBuilder ; } impl :: ink_lang :: reflect :: ContractEnv for CallBuilder { type Env = < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env ; } } ; impl :: ink_env :: call :: FromAccountId < Environment > for CallBuilder { # [inline] fn from_account_id (account_id : AccountId) -> Self { Self { account_id , } } } impl :: ink_lang :: ToAccountId < Environment > for CallBuilder { # [inline] fn to_account_id (& self) -> AccountId { < AccountId as :: core :: clone :: Clone > :: clone (& self . account_id) } } # [doc (hidden)] impl :: ink_lang :: codegen :: TraitCallForwarderFor < < :: ink_lang :: reflect :: TraitDefinitionRegistry < Environment > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo > for CallBuilder { type Forwarder = < < Self as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo as :: ink_lang :: codegen :: TraitCallForwarder > :: Forwarder ; # [inline (always)] fn forward (& self) -> & Self :: Forwarder { unsafe { & * (& self . account_id as * const AccountId as * const Self :: Forwarder) } } # [inline (always)] fn forward_mut (& mut self) -> & mut Self :: Forwarder { unsafe { & mut * (& mut self . account_id as * mut AccountId as * mut Self :: Forwarder) } } # [inline (always)] fn build (& self) -> & < Self :: Forwarder as :: ink_lang :: codegen :: TraitCallBuilder > :: Builder { < _ as :: ink_lang :: codegen :: TraitCallBuilder > :: call (< Self as :: ink_lang :: codegen :: TraitCallForwarderFor < < :: ink_lang :: reflect :: TraitDefinitionRegistry < Environment > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo > > :: forward (self)) } # [inline (always)] fn build_mut (& mut self) -> & mut < Self :: Forwarder as :: ink_lang :: codegen :: TraitCallBuilder > :: Builder { < _ as :: ink_lang :: codegen :: TraitCallBuilder > :: call_mut (< Self as :: ink_lang :: codegen :: TraitCallForwarderFor < < :: ink_lang :: reflect :: TraitDefinitionRegistry < Environment > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo > > :: forward_mut (self)) } } impl __brush_external_PSP22 :: PSP22 for CallBuilder { type __ink_TraitInfo = < :: ink_lang :: reflect :: TraitDefinitionRegistry < Environment > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo ; type AllowanceOutput = < < < Self as :: ink_lang :: codegen :: TraitCallForwarderFor < < :: ink_lang :: reflect :: TraitDefinitionRegistry < Environment > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo > > :: Forwarder as :: ink_lang :: codegen :: TraitCallBuilder > :: Builder as __brush_external_PSP22 :: PSP22 > :: AllowanceOutput ; # [inline] # [doc = " Returns the amount which `spender` is still allowed to withdraw from `owner`."] # [doc = ""] # [doc = " Returns `0` if no allowance has been set `0`."] fn allowance (& self , owner : AccountId , spender : AccountId) -> Self :: AllowanceOutput { < _ as __brush_external_PSP22 :: PSP22 > :: allowance (< Self as :: ink_lang :: codegen :: TraitCallForwarderFor < < :: ink_lang :: reflect :: TraitDefinitionRegistry < Environment > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo > > :: build (self) , owner , spender) } type BalanceOfOutput = < < < Self as :: ink_lang :: codegen :: TraitCallForwarderFor < < :: ink_lang :: reflect :: TraitDefinitionRegistry < Environment > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo > > :: Forwarder as :: ink_lang :: codegen :: TraitCallBuilder > :: Builder as __brush_external_PSP22 :: PSP22 > :: BalanceOfOutput ; # [inline] # [doc = " Returns the account Balance for the specified `owner`."] # [doc = ""] # [doc = " Returns `0` if the account is non-existent."] fn balance_of (& self , owner : AccountId) -> Self :: BalanceOfOutput { < _ as __brush_external_PSP22 :: PSP22 > :: balance_of (< Self as :: ink_lang :: codegen :: TraitCallForwarderFor < < :: ink_lang :: reflect :: TraitDefinitionRegistry < Environment > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo > > :: build (self) , owner) } type IncreaseAllowanceOutput = < < < Self as :: ink_lang :: codegen :: TraitCallForwarderFor < < :: ink_lang :: reflect :: TraitDefinitionRegistry < Environment > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo > > :: Forwarder as :: ink_lang :: codegen :: TraitCallBuilder > :: Builder as __brush_external_PSP22 :: PSP22 > :: IncreaseAllowanceOutput ; # [inline] # [doc = " Atomically increases the allowance granted to `spender` by the caller."] # [doc = ""] # [doc = " An `Approval` event is emitted."] # [doc = ""] # [doc = " # Errors"] # [doc = ""] # [doc = " Panics `ZeroSenderAddress` error if sender\'s address is zero."] # [doc = ""] # [doc = " Panics `ZeroRecipientAddress` error if recipient\'s address is zero."] fn increase_allowance (& mut self , spender : AccountId , delta_value : Balance) -> Self :: IncreaseAllowanceOutput { < _ as __brush_external_PSP22 :: PSP22 > :: increase_allowance (< Self as :: ink_lang :: codegen :: TraitCallForwarderFor < < :: ink_lang :: reflect :: TraitDefinitionRegistry < Environment > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo > > :: build_mut (self) , spender , delta_value) } type TotalSupplyOutput = < < < Self as :: ink_lang :: codegen :: TraitCallForwarderFor < < :: ink_lang :: reflect :: TraitDefinitionRegistry < Environment > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo > > :: Forwarder as :: ink_lang :: codegen :: TraitCallBuilder > :: Builder as __brush_external_PSP22 :: PSP22 > :: TotalSupplyOutput ; # [inline] # [doc = " Returns the total token supply."] fn total_supply (& self) -> Self :: TotalSupplyOutput { < _ as __brush_external_PSP22 :: PSP22 > :: total_supply (< Self as :: ink_lang :: codegen :: TraitCallForwarderFor < < :: ink_lang :: reflect :: TraitDefinitionRegistry < Environment > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo > > :: build (self)) } type TransferOutput = < < < Self as :: ink_lang :: codegen :: TraitCallForwarderFor < < :: ink_lang :: reflect :: TraitDefinitionRegistry < Environment > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo > > :: Forwarder as :: ink_lang :: codegen :: TraitCallBuilder > :: Builder as __brush_external_PSP22 :: PSP22 > :: TransferOutput ; # [inline] # [doc = " Transfers `value` amount of tokens from the caller\'s account to account `to`"] # [doc = " with additional `data` in unspecified format."] # [doc = ""] # [doc = " On success a `Transfer` event is emitted."] # [doc = ""] # [doc = " # Errors"] # [doc = ""] # [doc = " Panics `InsufficientBalance` error if there are not enough tokens on"] # [doc = " the caller\'s account Balance."] # [doc = ""] # [doc = " Panics `ZeroSenderAddress` error if sender\'s address is zero."] # [doc = ""] # [doc = " Panics `ZeroRecipientAddress` error if recipient\'s address is zero."] fn transfer (& mut self , to : AccountId , value : Balance , data : Vec < u8 >) -> Self :: TransferOutput { < _ as __brush_external_PSP22 :: PSP22 > :: transfer (< Self as :: ink_lang :: codegen :: TraitCallForwarderFor < < :: ink_lang :: reflect :: TraitDefinitionRegistry < Environment > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo > > :: build_mut (self) , to , value , data) } type TransferFromOutput = < < < Self as :: ink_lang :: codegen :: TraitCallForwarderFor < < :: ink_lang :: reflect :: TraitDefinitionRegistry < Environment > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo > > :: Forwarder as :: ink_lang :: codegen :: TraitCallBuilder > :: Builder as __brush_external_PSP22 :: PSP22 > :: TransferFromOutput ; # [inline] # [doc = " Transfers `value` tokens on the behalf of `from` to the account `to`"] # [doc = " with additional `data` in unspecified format."] # [doc = ""] # [doc = " This can be used to allow a contract to transfer tokens on ones behalf and/or"] # [doc = " to charge fees in sub-currencies, for example."] # [doc = ""] # [doc = " On success a `Transfer` and `Approval` events are emitted."] # [doc = ""] # [doc = " # Errors"] # [doc = ""] # [doc = " Panics `InsufficientAllowance` error if there are not enough tokens allowed"] # [doc = " for the caller to withdraw from `from`."] # [doc = ""] # [doc = " Panics `InsufficientBalance` error if there are not enough tokens on"] # [doc = " the the account Balance of `from`."] # [doc = ""] # [doc = " Panics `ZeroSenderAddress` error if sender\'s address is zero."] # [doc = ""] # [doc = " Panics `ZeroRecipientAddress` error if recipient\'s address is zero."] fn transfer_from (& mut self , from : AccountId , to : AccountId , value : Balance , data : Vec < u8 >) -> Self :: TransferFromOutput { < _ as __brush_external_PSP22 :: PSP22 > :: transfer_from (< Self as :: ink_lang :: codegen :: TraitCallForwarderFor < < :: ink_lang :: reflect :: TraitDefinitionRegistry < Environment > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo > > :: build_mut (self) , from , to , value , data) } type ApproveOutput = < < < Self as :: ink_lang :: codegen :: TraitCallForwarderFor < < :: ink_lang :: reflect :: TraitDefinitionRegistry < Environment > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo > > :: Forwarder as :: ink_lang :: codegen :: TraitCallBuilder > :: Builder as __brush_external_PSP22 :: PSP22 > :: ApproveOutput ; # [inline] # [doc = " Allows `spender` to withdraw from the caller\'s account multiple times, up to"] # [doc = " the `value` amount."] # [doc = ""] # [doc = " If this function is called again it overwrites the current allowance with `value`."] # [doc = ""] # [doc = " An `Approval` event is emitted."] # [doc = ""] # [doc = " # Errors"] # [doc = ""] # [doc = " Panics `ZeroSenderAddress` error if sender\'s address is zero."] # [doc = ""] # [doc = " Panics `ZeroRecipientAddress` error if recipient\'s address is zero."] fn approve (& mut self , spender : AccountId , value : Balance) -> Self :: ApproveOutput { < _ as __brush_external_PSP22 :: PSP22 > :: approve (< Self as :: ink_lang :: codegen :: TraitCallForwarderFor < < :: ink_lang :: reflect :: TraitDefinitionRegistry < Environment > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo > > :: build_mut (self) , spender , value) } type DecreaseAllowanceOutput = < < < Self as :: ink_lang :: codegen :: TraitCallForwarderFor < < :: ink_lang :: reflect :: TraitDefinitionRegistry < Environment > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo > > :: Forwarder as :: ink_lang :: codegen :: TraitCallBuilder > :: Builder as __brush_external_PSP22 :: PSP22 > :: DecreaseAllowanceOutput ; # [inline] # [doc = " Atomically decreases the allowance granted to `spender` by the caller."] # [doc = ""] # [doc = " An `Approval` event is emitted."] # [doc = ""] # [doc = " # Errors"] # [doc = ""] # [doc = " Panics `InsufficientAllowance` error if there are not enough tokens allowed"] # [doc = " by owner for `spender`."] # [doc = ""] # [doc = " Panics `ZeroSenderAddress` error if sender\'s address is zero."] # [doc = ""] # [doc = " Panics `ZeroRecipientAddress` error if recipient\'s address is zero."] fn decrease_allowance (& mut self , spender : AccountId , delta_value : Balance) -> Self :: DecreaseAllowanceOutput { < _ as __brush_external_PSP22 :: PSP22 > :: decrease_allowance (< Self as :: ink_lang :: codegen :: TraitCallForwarderFor < < :: ink_lang :: reflect :: TraitDefinitionRegistry < Environment > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo > > :: build_mut (self) , spender , delta_value) } } # [doc (hidden)] impl :: ink_lang :: codegen :: TraitCallForwarderFor < < :: ink_lang :: reflect :: TraitDefinitionRegistry < Environment > as __brush_external_PSP22Metadata :: PSP22Metadata > :: __ink_TraitInfo > for CallBuilder { type Forwarder = < < Self as __brush_external_PSP22Metadata :: PSP22Metadata > :: __ink_TraitInfo as :: ink_lang :: codegen :: TraitCallForwarder > :: Forwarder ; # [inline (always)] fn forward (& self) -> & Self :: Forwarder { unsafe { & * (& self . account_id as * const AccountId as * const Self :: Forwarder) } } # [inline (always)] fn forward_mut (& mut self) -> & mut Self :: Forwarder { unsafe { & mut * (& mut self . account_id as * mut AccountId as * mut Self :: Forwarder) } } # [inline (always)] fn build (& self) -> & < Self :: Forwarder as :: ink_lang :: codegen :: TraitCallBuilder > :: Builder { < _ as :: ink_lang :: codegen :: TraitCallBuilder > :: call (< Self as :: ink_lang :: codegen :: TraitCallForwarderFor < < :: ink_lang :: reflect :: TraitDefinitionRegistry < Environment > as __brush_external_PSP22Metadata :: PSP22Metadata > :: __ink_TraitInfo > > :: forward (self)) } # [inline (always)] fn build_mut (& mut self) -> & mut < Self :: Forwarder as :: ink_lang :: codegen :: TraitCallBuilder > :: Builder { < _ as :: ink_lang :: codegen :: TraitCallBuilder > :: call_mut (< Self as :: ink_lang :: codegen :: TraitCallForwarderFor < < :: ink_lang :: reflect :: TraitDefinitionRegistry < Environment > as __brush_external_PSP22Metadata :: PSP22Metadata > :: __ink_TraitInfo > > :: forward_mut (self)) } } impl __brush_external_PSP22Metadata :: PSP22Metadata for CallBuilder { type __ink_TraitInfo = < :: ink_lang :: reflect :: TraitDefinitionRegistry < Environment > as __brush_external_PSP22Metadata :: PSP22Metadata > :: __ink_TraitInfo ; type TokenNameOutput = < < < Self as :: ink_lang :: codegen :: TraitCallForwarderFor < < :: ink_lang :: reflect :: TraitDefinitionRegistry < Environment > as __brush_external_PSP22Metadata :: PSP22Metadata > :: __ink_TraitInfo > > :: Forwarder as :: ink_lang :: codegen :: TraitCallBuilder > :: Builder as __brush_external_PSP22Metadata :: PSP22Metadata > :: TokenNameOutput ; # [inline] # [doc = " Returns the token name."] fn token_name (& self) -> Self :: TokenNameOutput { < _ as __brush_external_PSP22Metadata :: PSP22Metadata > :: token_name (< Self as :: ink_lang :: codegen :: TraitCallForwarderFor < < :: ink_lang :: reflect :: TraitDefinitionRegistry < Environment > as __brush_external_PSP22Metadata :: PSP22Metadata > :: __ink_TraitInfo > > :: build (self)) } type TokenSymbolOutput = < < < Self as :: ink_lang :: codegen :: TraitCallForwarderFor < < :: ink_lang :: reflect :: TraitDefinitionRegistry < Environment > as __brush_external_PSP22Metadata :: PSP22Metadata > :: __ink_TraitInfo > > :: Forwarder as :: ink_lang :: codegen :: TraitCallBuilder > :: Builder as __brush_external_PSP22Metadata :: PSP22Metadata > :: TokenSymbolOutput ; # [inline] # [doc = " Returns the token symbol."] fn token_symbol (& self) -> Self :: TokenSymbolOutput { < _ as __brush_external_PSP22Metadata :: PSP22Metadata > :: token_symbol (< Self as :: ink_lang :: codegen :: TraitCallForwarderFor < < :: ink_lang :: reflect :: TraitDefinitionRegistry < Environment > as __brush_external_PSP22Metadata :: PSP22Metadata > :: __ink_TraitInfo > > :: build (self)) } type TokenDecimalsOutput = < < < Self as :: ink_lang :: codegen :: TraitCallForwarderFor < < :: ink_lang :: reflect :: TraitDefinitionRegistry < Environment > as __brush_external_PSP22Metadata :: PSP22Metadata > :: __ink_TraitInfo > > :: Forwarder as :: ink_lang :: codegen :: TraitCallBuilder > :: Builder as __brush_external_PSP22Metadata :: PSP22Metadata > :: TokenDecimalsOutput ; # [inline] # [doc = " Returns the token decimals."] fn token_decimals (& self) -> Self :: TokenDecimalsOutput { < _ as __brush_external_PSP22Metadata :: PSP22Metadata > :: token_decimals (< Self as :: ink_lang :: codegen :: TraitCallForwarderFor < < :: ink_lang :: reflect :: TraitDefinitionRegistry < Environment > as __brush_external_PSP22Metadata :: PSP22Metadata > :: __ink_TraitInfo > > :: build (self)) } } impl CallBuilder { # [allow (clippy :: type_complexity)] # [inline] pub fn set_hated_account (& mut self , __ink_binding_0 : AccountId) -> :: ink_env :: call :: CallBuilder < Environment , :: ink_env :: call :: utils :: Set < < Environment as :: ink_env :: Environment > :: AccountId > , :: ink_env :: call :: utils :: Unset < :: core :: primitive :: u64 > , :: ink_env :: call :: utils :: Unset < < Environment as :: ink_env :: Environment > :: Balance > , :: ink_env :: call :: utils :: Set < :: ink_env :: call :: ExecutionInput < :: ink_env :: call :: utils :: ArgumentList < :: ink_env :: call :: utils :: Argument < AccountId > , :: ink_env :: call :: utils :: EmptyArgumentList > > > , :: ink_env :: call :: utils :: Set < () > > { :: ink_env :: call :: build_call :: < Environment > () . callee (:: ink_lang :: ToAccountId :: to_account_id (self)) . exec_input (:: ink_env :: call :: ExecutionInput :: new (:: ink_env :: call :: Selector :: new ([0x19_u8 , 0x39_u8 , 0x89_u8 , 0x62_u8])) . push_arg (__ink_binding_0)) . returns :: < () > () } # [allow (clippy :: type_complexity)] # [inline] pub fn get_hated_account (& self) -> :: ink_env :: call :: CallBuilder < Environment , :: ink_env :: call :: utils :: Set < < Environment as :: ink_env :: Environment > :: AccountId > , :: ink_env :: call :: utils :: Unset < :: core :: primitive :: u64 > , :: ink_env :: call :: utils :: Unset < < Environment as :: ink_env :: Environment > :: Balance > , :: ink_env :: call :: utils :: Set < :: ink_env :: call :: ExecutionInput < :: ink_env :: call :: utils :: EmptyArgumentList > > , :: ink_env :: call :: utils :: Set < :: ink_env :: call :: utils :: ReturnType < AccountId > > > { :: ink_env :: call :: build_call :: < Environment > () . callee (:: ink_lang :: ToAccountId :: to_account_id (self)) . exec_input (:: ink_env :: call :: ExecutionInput :: new (:: ink_env :: call :: Selector :: new ([0x9E_u8 , 0x5E_u8 , 0x36_u8 , 0x3F_u8]))) . returns :: < :: ink_env :: call :: utils :: ReturnType < AccountId > > () } } };
    pub struct MyPSP22Ref {
        inner: <MyPSP22 as ::ink_lang::codegen::ContractCallBuilder>::Type,
    }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::fmt::Debug for MyPSP22Ref {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            match *self {
                MyPSP22Ref {
                    inner: ref __self_0_0,
                } => {
                    let debug_trait_builder =
                        &mut ::core::fmt::Formatter::debug_struct(f, "MyPSP22Ref");
                    let _ = ::core::fmt::DebugStruct::field(
                        debug_trait_builder,
                        "inner",
                        &&(*__self_0_0),
                    );
                    ::core::fmt::DebugStruct::finish(debug_trait_builder)
                }
            }
        }
    }
    const _: () = {
        impl ::ink_storage::traits::SpreadLayout for MyPSP22Ref {
            #[allow(unused_comparisons)]
            const FOOTPRINT : :: core :: primitive :: u64 = [(0u64 + < < MyPSP22 as :: ink_lang :: codegen :: ContractCallBuilder > :: Type as :: ink_storage :: traits :: SpreadLayout > :: FOOTPRINT) , 0u64] [((0u64 + < < MyPSP22 as :: ink_lang :: codegen :: ContractCallBuilder > :: Type as :: ink_storage :: traits :: SpreadLayout > :: FOOTPRINT) < 0u64) as :: core :: primitive :: usize] ;
            const REQUIRES_DEEP_CLEAN_UP : :: core :: primitive :: bool = (false || (false || < < MyPSP22 as :: ink_lang :: codegen :: ContractCallBuilder > :: Type as :: ink_storage :: traits :: SpreadLayout > :: REQUIRES_DEEP_CLEAN_UP)) ;
            fn pull_spread(__key_ptr: &mut ::ink_storage::traits::KeyPtr) -> Self {
                MyPSP22Ref { inner : < < MyPSP22 as :: ink_lang :: codegen :: ContractCallBuilder > :: Type as :: ink_storage :: traits :: SpreadLayout > :: pull_spread (__key_ptr) , }
            }
            fn push_spread(&self, __key_ptr: &mut ::ink_storage::traits::KeyPtr) {
                match self {
                    MyPSP22Ref { inner: __binding_0 } => {
                        ::ink_storage::traits::SpreadLayout::push_spread(__binding_0, __key_ptr);
                    }
                }
            }
            fn clear_spread(&self, __key_ptr: &mut ::ink_storage::traits::KeyPtr) {
                match self {
                    MyPSP22Ref { inner: __binding_0 } => {
                        ::ink_storage::traits::SpreadLayout::clear_spread(__binding_0, __key_ptr);
                    }
                }
            }
        }
    };
    const _: () = {
        impl ::ink_storage::traits::PackedLayout for MyPSP22Ref {
            fn pull_packed(&mut self, __key: &::ink_primitives::Key) {
                match self {
                    MyPSP22Ref { inner: __binding_0 } => {
                        ::ink_storage::traits::PackedLayout::pull_packed(__binding_0, __key);
                    }
                }
            }
            fn push_packed(&self, __key: &::ink_primitives::Key) {
                match self {
                    MyPSP22Ref { inner: __binding_0 } => {
                        ::ink_storage::traits::PackedLayout::push_packed(__binding_0, __key);
                    }
                }
            }
            fn clear_packed(&self, __key: &::ink_primitives::Key) {
                match self {
                    MyPSP22Ref { inner: __binding_0 } => {
                        ::ink_storage::traits::PackedLayout::clear_packed(__binding_0, __key);
                    }
                }
            }
        }
    };
    const _: () = {
        impl ::scale::Encode for MyPSP22Ref {
            fn encode_to<__CodecOutputEdqy: ::scale::Output + ?::core::marker::Sized>(
                &self,
                __codec_dest_edqy: &mut __CodecOutputEdqy,
            ) {
                ::scale::Encode::encode_to(&&self.inner, __codec_dest_edqy)
            }
            fn encode(&self) -> ::scale::alloc::vec::Vec<::core::primitive::u8> {
                ::scale::Encode::encode(&&self.inner)
            }
            fn using_encoded<R, F: ::core::ops::FnOnce(&[::core::primitive::u8]) -> R>(
                &self,
                f: F,
            ) -> R {
                ::scale::Encode::using_encoded(&&self.inner, f)
            }
        }
        impl ::scale::EncodeLike for MyPSP22Ref {}
    };
    const _: () = {
        impl ::scale::Decode for MyPSP22Ref {
            fn decode<__CodecInputEdqy: ::scale::Input>(
                __codec_input_edqy: &mut __CodecInputEdqy,
            ) -> ::core::result::Result<Self, ::scale::Error> {
                ::core::result::Result::Ok(MyPSP22Ref {
                    inner: {
                        let __codec_res_edqy = < < MyPSP22 as :: ink_lang :: codegen :: ContractCallBuilder > :: Type as :: scale :: Decode > :: decode (__codec_input_edqy) ;
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e.chain("Could not decode `MyPSP22Ref::inner`"),
                                )
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => __codec_res_edqy,
                        }
                    },
                })
            }
        }
    };
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::hash::Hash for MyPSP22Ref {
        fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {
            match *self {
                MyPSP22Ref {
                    inner: ref __self_0_0,
                } => ::core::hash::Hash::hash(&(*__self_0_0), state),
            }
        }
    }
    impl ::core::marker::StructuralPartialEq for MyPSP22Ref {}
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::cmp::PartialEq for MyPSP22Ref {
        #[inline]
        fn eq(&self, other: &MyPSP22Ref) -> bool {
            match *other {
                MyPSP22Ref {
                    inner: ref __self_1_0,
                } => match *self {
                    MyPSP22Ref {
                        inner: ref __self_0_0,
                    } => (*__self_0_0) == (*__self_1_0),
                },
            }
        }
        #[inline]
        fn ne(&self, other: &MyPSP22Ref) -> bool {
            match *other {
                MyPSP22Ref {
                    inner: ref __self_1_0,
                } => match *self {
                    MyPSP22Ref {
                        inner: ref __self_0_0,
                    } => (*__self_0_0) != (*__self_1_0),
                },
            }
        }
    }
    impl ::core::marker::StructuralEq for MyPSP22Ref {}
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::cmp::Eq for MyPSP22Ref {
        #[inline]
        #[doc(hidden)]
        #[no_coverage]
        fn assert_receiver_is_total_eq(&self) -> () {
            {
                let _: ::core::cmp::AssertParamIsEq<
                    <MyPSP22 as ::ink_lang::codegen::ContractCallBuilder>::Type,
                >;
            }
        }
    }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::clone::Clone for MyPSP22Ref {
        #[inline]
        fn clone(&self) -> MyPSP22Ref {
            match *self {
                MyPSP22Ref {
                    inner: ref __self_0_0,
                } => MyPSP22Ref {
                    inner: ::core::clone::Clone::clone(&(*__self_0_0)),
                },
            }
        }
    }
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        impl ::scale_info::TypeInfo for MyPSP22Ref {
            type Identity = Self;
            fn type_info() -> ::scale_info::Type {
                ::scale_info::Type::builder()
                    .path(::scale_info::Path::new("MyPSP22Ref", "my_psp22::my_psp22"))
                    .type_params(::alloc::vec::Vec::new())
                    .docs(&[])
                    .composite(::scale_info::build::Fields::named().field(|f| {
                        f.ty::<<MyPSP22 as ::ink_lang::codegen::ContractCallBuilder>::Type>()
                            .name("inner")
                            .type_name("<MyPSP22 as::ink_lang::codegen::ContractCallBuilder>::Type")
                            .docs(&[])
                    }))
            }
        };
    };
    const _: () = {
        impl ::ink_storage::traits::StorageLayout for MyPSP22Ref {
            fn layout(
                __key_ptr: &mut ::ink_storage::traits::KeyPtr,
            ) -> ::ink_metadata::layout::Layout {
                :: ink_metadata :: layout :: Layout :: Struct (:: ink_metadata :: layout :: StructLayout :: new ([:: ink_metadata :: layout :: FieldLayout :: new (:: core :: option :: Option :: Some ("inner") , < < MyPSP22 as :: ink_lang :: codegen :: ContractCallBuilder > :: Type as :: ink_storage :: traits :: StorageLayout > :: layout (__key_ptr))]))
            }
        }
    };
    const _: () = {
        impl ::ink_lang::reflect::ContractReference for MyPSP22 {
            type Type = MyPSP22Ref;
        }
        impl ::ink_lang::reflect::ContractEnv for MyPSP22Ref {
            type Env = <MyPSP22 as ::ink_lang::reflect::ContractEnv>::Env;
        }
    };
    impl __brush_external_PSP22::PSP22 for MyPSP22Ref {
        #[doc(hidden)]
        type __ink_TraitInfo = < :: ink_lang :: reflect :: TraitDefinitionRegistry < Environment > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo ;
        type AllowanceOutput = < < Self :: __ink_TraitInfo as :: ink_lang :: codegen :: TraitCallForwarder > :: Forwarder as __brush_external_PSP22 :: PSP22 > :: AllowanceOutput ;
        #[inline]
        fn allowance(&self, owner: AccountId, spender: AccountId) -> Self::AllowanceOutput {
            < _ as __brush_external_PSP22 :: PSP22 > :: allowance (< _ as :: ink_lang :: codegen :: TraitCallForwarderFor < < :: ink_lang :: reflect :: TraitDefinitionRegistry < Environment > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo > > :: forward (< Self as :: ink_lang :: codegen :: TraitCallBuilder > :: call (self)) , owner , spender)
        }
        type BalanceOfOutput = < < Self :: __ink_TraitInfo as :: ink_lang :: codegen :: TraitCallForwarder > :: Forwarder as __brush_external_PSP22 :: PSP22 > :: BalanceOfOutput ;
        #[inline]
        fn balance_of(&self, owner: AccountId) -> Self::BalanceOfOutput {
            < _ as __brush_external_PSP22 :: PSP22 > :: balance_of (< _ as :: ink_lang :: codegen :: TraitCallForwarderFor < < :: ink_lang :: reflect :: TraitDefinitionRegistry < Environment > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo > > :: forward (< Self as :: ink_lang :: codegen :: TraitCallBuilder > :: call (self)) , owner)
        }
        type IncreaseAllowanceOutput = < < Self :: __ink_TraitInfo as :: ink_lang :: codegen :: TraitCallForwarder > :: Forwarder as __brush_external_PSP22 :: PSP22 > :: IncreaseAllowanceOutput ;
        #[inline]
        fn increase_allowance(
            &mut self,
            spender: AccountId,
            delta_value: Balance,
        ) -> Self::IncreaseAllowanceOutput {
            < _ as __brush_external_PSP22 :: PSP22 > :: increase_allowance (< _ as :: ink_lang :: codegen :: TraitCallForwarderFor < < :: ink_lang :: reflect :: TraitDefinitionRegistry < Environment > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo > > :: forward_mut (< Self as :: ink_lang :: codegen :: TraitCallBuilder > :: call_mut (self)) , spender , delta_value)
        }
        type TotalSupplyOutput = < < Self :: __ink_TraitInfo as :: ink_lang :: codegen :: TraitCallForwarder > :: Forwarder as __brush_external_PSP22 :: PSP22 > :: TotalSupplyOutput ;
        #[inline]
        fn total_supply(&self) -> Self::TotalSupplyOutput {
            < _ as __brush_external_PSP22 :: PSP22 > :: total_supply (< _ as :: ink_lang :: codegen :: TraitCallForwarderFor < < :: ink_lang :: reflect :: TraitDefinitionRegistry < Environment > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo > > :: forward (< Self as :: ink_lang :: codegen :: TraitCallBuilder > :: call (self)))
        }
        type TransferOutput = < < Self :: __ink_TraitInfo as :: ink_lang :: codegen :: TraitCallForwarder > :: Forwarder as __brush_external_PSP22 :: PSP22 > :: TransferOutput ;
        #[inline]
        fn transfer(
            &mut self,
            to: AccountId,
            value: Balance,
            data: Vec<u8>,
        ) -> Self::TransferOutput {
            < _ as __brush_external_PSP22 :: PSP22 > :: transfer (< _ as :: ink_lang :: codegen :: TraitCallForwarderFor < < :: ink_lang :: reflect :: TraitDefinitionRegistry < Environment > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo > > :: forward_mut (< Self as :: ink_lang :: codegen :: TraitCallBuilder > :: call_mut (self)) , to , value , data)
        }
        type TransferFromOutput = < < Self :: __ink_TraitInfo as :: ink_lang :: codegen :: TraitCallForwarder > :: Forwarder as __brush_external_PSP22 :: PSP22 > :: TransferFromOutput ;
        #[inline]
        fn transfer_from(
            &mut self,
            from: AccountId,
            to: AccountId,
            value: Balance,
            data: Vec<u8>,
        ) -> Self::TransferFromOutput {
            < _ as __brush_external_PSP22 :: PSP22 > :: transfer_from (< _ as :: ink_lang :: codegen :: TraitCallForwarderFor < < :: ink_lang :: reflect :: TraitDefinitionRegistry < Environment > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo > > :: forward_mut (< Self as :: ink_lang :: codegen :: TraitCallBuilder > :: call_mut (self)) , from , to , value , data)
        }
        type ApproveOutput = < < Self :: __ink_TraitInfo as :: ink_lang :: codegen :: TraitCallForwarder > :: Forwarder as __brush_external_PSP22 :: PSP22 > :: ApproveOutput ;
        #[inline]
        fn approve(&mut self, spender: AccountId, value: Balance) -> Self::ApproveOutput {
            < _ as __brush_external_PSP22 :: PSP22 > :: approve (< _ as :: ink_lang :: codegen :: TraitCallForwarderFor < < :: ink_lang :: reflect :: TraitDefinitionRegistry < Environment > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo > > :: forward_mut (< Self as :: ink_lang :: codegen :: TraitCallBuilder > :: call_mut (self)) , spender , value)
        }
        type DecreaseAllowanceOutput = < < Self :: __ink_TraitInfo as :: ink_lang :: codegen :: TraitCallForwarder > :: Forwarder as __brush_external_PSP22 :: PSP22 > :: DecreaseAllowanceOutput ;
        #[inline]
        fn decrease_allowance(
            &mut self,
            spender: AccountId,
            delta_value: Balance,
        ) -> Self::DecreaseAllowanceOutput {
            < _ as __brush_external_PSP22 :: PSP22 > :: decrease_allowance (< _ as :: ink_lang :: codegen :: TraitCallForwarderFor < < :: ink_lang :: reflect :: TraitDefinitionRegistry < Environment > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo > > :: forward_mut (< Self as :: ink_lang :: codegen :: TraitCallBuilder > :: call_mut (self)) , spender , delta_value)
        }
    }
    impl __brush_external_PSP22Metadata::PSP22Metadata for MyPSP22Ref {
        #[doc(hidden)]
        type __ink_TraitInfo = < :: ink_lang :: reflect :: TraitDefinitionRegistry < Environment > as __brush_external_PSP22Metadata :: PSP22Metadata > :: __ink_TraitInfo ;
        type TokenNameOutput = < < Self :: __ink_TraitInfo as :: ink_lang :: codegen :: TraitCallForwarder > :: Forwarder as __brush_external_PSP22Metadata :: PSP22Metadata > :: TokenNameOutput ;
        #[inline]
        fn token_name(&self) -> Self::TokenNameOutput {
            < _ as __brush_external_PSP22Metadata :: PSP22Metadata > :: token_name (< _ as :: ink_lang :: codegen :: TraitCallForwarderFor < < :: ink_lang :: reflect :: TraitDefinitionRegistry < Environment > as __brush_external_PSP22Metadata :: PSP22Metadata > :: __ink_TraitInfo > > :: forward (< Self as :: ink_lang :: codegen :: TraitCallBuilder > :: call (self)))
        }
        type TokenSymbolOutput = < < Self :: __ink_TraitInfo as :: ink_lang :: codegen :: TraitCallForwarder > :: Forwarder as __brush_external_PSP22Metadata :: PSP22Metadata > :: TokenSymbolOutput ;
        #[inline]
        fn token_symbol(&self) -> Self::TokenSymbolOutput {
            < _ as __brush_external_PSP22Metadata :: PSP22Metadata > :: token_symbol (< _ as :: ink_lang :: codegen :: TraitCallForwarderFor < < :: ink_lang :: reflect :: TraitDefinitionRegistry < Environment > as __brush_external_PSP22Metadata :: PSP22Metadata > :: __ink_TraitInfo > > :: forward (< Self as :: ink_lang :: codegen :: TraitCallBuilder > :: call (self)))
        }
        type TokenDecimalsOutput = < < Self :: __ink_TraitInfo as :: ink_lang :: codegen :: TraitCallForwarder > :: Forwarder as __brush_external_PSP22Metadata :: PSP22Metadata > :: TokenDecimalsOutput ;
        #[inline]
        fn token_decimals(&self) -> Self::TokenDecimalsOutput {
            < _ as __brush_external_PSP22Metadata :: PSP22Metadata > :: token_decimals (< _ as :: ink_lang :: codegen :: TraitCallForwarderFor < < :: ink_lang :: reflect :: TraitDefinitionRegistry < Environment > as __brush_external_PSP22Metadata :: PSP22Metadata > :: __ink_TraitInfo > > :: forward (< Self as :: ink_lang :: codegen :: TraitCallBuilder > :: call (self)))
        }
    }
    impl MyPSP22Ref {
        #[inline]
        #[allow(clippy::type_complexity)]
        pub fn new(
            __ink_binding_0: Balance,
            __ink_binding_1: Option<String>,
            __ink_binding_2: Option<String>,
            __ink_binding_3: u8,
        ) -> ::ink_env::call::CreateBuilder<
            Environment,
            ::ink_env::call::utils::Unset<Hash>,
            ::ink_env::call::utils::Unset<u64>,
            ::ink_env::call::utils::Unset<Balance>,
            ::ink_env::call::utils::Set<
                ::ink_env::call::ExecutionInput<
                    ::ink_env::call::utils::ArgumentList<
                        ::ink_env::call::utils::Argument<u8>,
                        ::ink_env::call::utils::ArgumentList<
                            ::ink_env::call::utils::Argument<Option<String>>,
                            ::ink_env::call::utils::ArgumentList<
                                ::ink_env::call::utils::Argument<Option<String>>,
                                ::ink_env::call::utils::ArgumentList<
                                    ::ink_env::call::utils::Argument<Balance>,
                                    ::ink_env::call::utils::EmptyArgumentList,
                                >,
                            >,
                        >,
                    >,
                >,
            >,
            ::ink_env::call::utils::Unset<::ink_env::call::state::Salt>,
            Self,
        > {
            ::ink_env::call::build_create::<Environment, Self>().exec_input(
                ::ink_env::call::ExecutionInput::new(::ink_env::call::Selector::new([
                    0x9B_u8, 0xAE_u8, 0x9D_u8, 0x5E_u8,
                ]))
                .push_arg(__ink_binding_0)
                .push_arg(__ink_binding_1)
                .push_arg(__ink_binding_2)
                .push_arg(__ink_binding_3),
            )
        }
        #[inline]
        pub fn set_hated_account(&mut self, hated: AccountId) {
            <Self as ::ink_lang::codegen::TraitCallBuilder>::call_mut(self)
                .set_hated_account(hated)
                .fire()
                .unwrap_or_else(|error| {
                    ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(
                        &["encountered error while calling ", "::", ": "],
                        &match (&"MyPSP22", &"set_hated_account", &error) {
                            (arg0, arg1, arg2) => [
                                ::core::fmt::ArgumentV1::new(arg0, ::core::fmt::Display::fmt),
                                ::core::fmt::ArgumentV1::new(arg1, ::core::fmt::Display::fmt),
                                ::core::fmt::ArgumentV1::new(arg2, ::core::fmt::Debug::fmt),
                            ],
                        },
                    ))
                })
        }
        #[inline]
        pub fn get_hated_account(&self) -> AccountId {
            <Self as ::ink_lang::codegen::TraitCallBuilder>::call(self)
                .get_hated_account()
                .fire()
                .unwrap_or_else(|error| {
                    ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(
                        &["encountered error while calling ", "::", ": "],
                        &match (&"MyPSP22", &"get_hated_account", &error) {
                            (arg0, arg1, arg2) => [
                                ::core::fmt::ArgumentV1::new(arg0, ::core::fmt::Display::fmt),
                                ::core::fmt::ArgumentV1::new(arg1, ::core::fmt::Display::fmt),
                                ::core::fmt::ArgumentV1::new(arg2, ::core::fmt::Debug::fmt),
                            ],
                        },
                    ))
                })
        }
    }
    const _: () = {
        impl ::ink_lang::codegen::TraitCallBuilder for MyPSP22Ref {
            type Builder = <MyPSP22 as ::ink_lang::codegen::ContractCallBuilder>::Type;
            #[inline]
            fn call(&self) -> &Self::Builder {
                &self.inner
            }
            #[inline]
            fn call_mut(&mut self) -> &mut Self::Builder {
                &mut self.inner
            }
        }
    };
    impl ::ink_env::call::FromAccountId<Environment> for MyPSP22Ref {
        #[inline]
        fn from_account_id(account_id: AccountId) -> Self {
            Self { inner : < < MyPSP22 as :: ink_lang :: codegen :: ContractCallBuilder > :: Type as :: ink_env :: call :: FromAccountId < Environment > > :: from_account_id (account_id) , }
        }
    }
    impl ::ink_lang::ToAccountId<Environment> for MyPSP22Ref {
        #[inline]
        fn to_account_id(&self) -> AccountId {
            < < MyPSP22 as :: ink_lang :: codegen :: ContractCallBuilder > :: Type as :: ink_lang :: ToAccountId < Environment > > :: to_account_id (& self . inner)
        }
    }
    #[cfg(feature = "std")]
    #[cfg(not(feature = "ink-as-dependency"))]
    const _: () = {
        #[no_mangle]
        pub fn __ink_generate_metadata() -> ::ink_metadata::MetadataVersioned {
            < :: ink_metadata :: InkProject as :: core :: convert :: Into < :: ink_metadata :: MetadataVersioned > > :: into (:: ink_metadata :: InkProject :: new (< MyPSP22 as :: ink_storage :: traits :: StorageLayout > :: layout (& mut < :: ink_primitives :: KeyPtr as :: core :: convert :: From < :: ink_primitives :: Key > > :: from (< :: ink_primitives :: Key as :: core :: convert :: From < [:: core :: primitive :: u8 ; 32usize] > > :: from ([0x00_u8 ; 32usize]))) , :: ink_metadata :: ContractSpec :: new () . constructors ([:: ink_metadata :: ConstructorSpec :: from_name ("new") . selector ([0x9B_u8 , 0xAE_u8 , 0x9D_u8 , 0x5E_u8]) . args ([:: ink_metadata :: MessageParamSpec :: new ("total_supply") . of_type (:: ink_metadata :: TypeSpec :: with_name_segs :: < Balance , _ > (:: core :: iter :: IntoIterator :: into_iter (["Balance"]) . map (:: core :: convert :: AsRef :: as_ref))) . done () , :: ink_metadata :: MessageParamSpec :: new ("name") . of_type (:: ink_metadata :: TypeSpec :: with_name_segs :: < Option < String > , _ > (:: core :: iter :: IntoIterator :: into_iter (["Option"]) . map (:: core :: convert :: AsRef :: as_ref))) . done () , :: ink_metadata :: MessageParamSpec :: new ("symbol") . of_type (:: ink_metadata :: TypeSpec :: with_name_segs :: < Option < String > , _ > (:: core :: iter :: IntoIterator :: into_iter (["Option"]) . map (:: core :: convert :: AsRef :: as_ref))) . done () , :: ink_metadata :: MessageParamSpec :: new ("decimal") . of_type (:: ink_metadata :: TypeSpec :: with_name_segs :: < u8 , _ > (:: core :: iter :: IntoIterator :: into_iter (["u8"]) . map (:: core :: convert :: AsRef :: as_ref))) . done ()]) . docs ([]) . done ()]) . messages ([:: ink_metadata :: MessageSpec :: from_name ("set_hated_account") . selector ([0x19_u8 , 0x39_u8 , 0x89_u8 , 0x62_u8]) . args ([:: ink_metadata :: MessageParamSpec :: new ("hated") . of_type (:: ink_metadata :: TypeSpec :: with_name_segs :: < AccountId , _ > (:: core :: iter :: IntoIterator :: into_iter (["AccountId"]) . map (:: core :: convert :: AsRef :: as_ref))) . done ()]) . returns (:: ink_metadata :: ReturnTypeSpec :: new (:: core :: option :: Option :: None)) . mutates (true) . payable (false) . docs ([]) . done () , :: ink_metadata :: MessageSpec :: from_name ("get_hated_account") . selector ([0x9E_u8 , 0x5E_u8 , 0x36_u8 , 0x3F_u8]) . args ([]) . returns (:: ink_metadata :: ReturnTypeSpec :: new (:: ink_metadata :: TypeSpec :: with_name_segs :: < AccountId , _ > (:: core :: iter :: IntoIterator :: into_iter (["AccountId"]) . map (:: core :: convert :: AsRef :: as_ref)))) . mutates (false) . payable (false) . docs ([]) . done () , :: ink_metadata :: MessageSpec :: from_trait_and_name ("PSP22" , "allowance") . selector ({ < < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0x6A00165E_u32 > > :: SELECTOR }) . args ([:: ink_metadata :: MessageParamSpec :: new ("owner") . of_type (:: ink_metadata :: TypeSpec :: with_name_segs :: < AccountId , _ > (:: core :: iter :: IntoIterator :: into_iter (["AccountId"]) . map (:: core :: convert :: AsRef :: as_ref))) . done () , :: ink_metadata :: MessageParamSpec :: new ("spender") . of_type (:: ink_metadata :: TypeSpec :: with_name_segs :: < AccountId , _ > (:: core :: iter :: IntoIterator :: into_iter (["AccountId"]) . map (:: core :: convert :: AsRef :: as_ref))) . done ()]) . returns (:: ink_metadata :: ReturnTypeSpec :: new (:: ink_metadata :: TypeSpec :: with_name_segs :: < Balance , _ > (:: core :: iter :: IntoIterator :: into_iter (["Balance"]) . map (:: core :: convert :: AsRef :: as_ref)))) . mutates (false) . payable ({ < < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0x6A00165E_u32 > > :: PAYABLE }) . docs ([" Returns the amount which `spender` is still allowed to withdraw from `owner`." , "" , " Returns `0` if no allowance has been set `0`."]) . done () , :: ink_metadata :: MessageSpec :: from_trait_and_name ("PSP22" , "balance_of") . selector ({ < < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0x0F755A56_u32 > > :: SELECTOR }) . args ([:: ink_metadata :: MessageParamSpec :: new ("owner") . of_type (:: ink_metadata :: TypeSpec :: with_name_segs :: < AccountId , _ > (:: core :: iter :: IntoIterator :: into_iter (["AccountId"]) . map (:: core :: convert :: AsRef :: as_ref))) . done ()]) . returns (:: ink_metadata :: ReturnTypeSpec :: new (:: ink_metadata :: TypeSpec :: with_name_segs :: < Balance , _ > (:: core :: iter :: IntoIterator :: into_iter (["Balance"]) . map (:: core :: convert :: AsRef :: as_ref)))) . mutates (false) . payable ({ < < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0x0F755A56_u32 > > :: PAYABLE }) . docs ([" Returns the account Balance for the specified `owner`." , "" , " Returns `0` if the account is non-existent."]) . done () , :: ink_metadata :: MessageSpec :: from_trait_and_name ("PSP22" , "increase_allowance") . selector ({ < < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0xF551D422_u32 > > :: SELECTOR }) . args ([:: ink_metadata :: MessageParamSpec :: new ("spender") . of_type (:: ink_metadata :: TypeSpec :: with_name_segs :: < AccountId , _ > (:: core :: iter :: IntoIterator :: into_iter (["AccountId"]) . map (:: core :: convert :: AsRef :: as_ref))) . done () , :: ink_metadata :: MessageParamSpec :: new ("delta_value") . of_type (:: ink_metadata :: TypeSpec :: with_name_segs :: < Balance , _ > (:: core :: iter :: IntoIterator :: into_iter (["Balance"]) . map (:: core :: convert :: AsRef :: as_ref))) . done ()]) . returns (:: ink_metadata :: ReturnTypeSpec :: new (:: ink_metadata :: TypeSpec :: with_name_segs :: < Result < () , PSP22Error > , _ > (:: core :: iter :: IntoIterator :: into_iter (["Result"]) . map (:: core :: convert :: AsRef :: as_ref)))) . mutates (true) . payable ({ < < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0xF551D422_u32 > > :: PAYABLE }) . docs ([" Atomically increases the allowance granted to `spender` by the caller." , "" , " An `Approval` event is emitted." , "" , " # Errors" , "" , " Panics `ZeroSenderAddress` error if sender\'s address is zero." , "" , " Panics `ZeroRecipientAddress` error if recipient\'s address is zero."]) . done () , :: ink_metadata :: MessageSpec :: from_trait_and_name ("PSP22" , "total_supply") . selector ({ < < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0xDB6375A8_u32 > > :: SELECTOR }) . args ([]) . returns (:: ink_metadata :: ReturnTypeSpec :: new (:: ink_metadata :: TypeSpec :: with_name_segs :: < Balance , _ > (:: core :: iter :: IntoIterator :: into_iter (["Balance"]) . map (:: core :: convert :: AsRef :: as_ref)))) . mutates (false) . payable ({ < < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0xDB6375A8_u32 > > :: PAYABLE }) . docs ([" Returns the total token supply."]) . done () , :: ink_metadata :: MessageSpec :: from_trait_and_name ("PSP22" , "transfer") . selector ({ < < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0x84A15DA1_u32 > > :: SELECTOR }) . args ([:: ink_metadata :: MessageParamSpec :: new ("to") . of_type (:: ink_metadata :: TypeSpec :: with_name_segs :: < AccountId , _ > (:: core :: iter :: IntoIterator :: into_iter (["AccountId"]) . map (:: core :: convert :: AsRef :: as_ref))) . done () , :: ink_metadata :: MessageParamSpec :: new ("value") . of_type (:: ink_metadata :: TypeSpec :: with_name_segs :: < Balance , _ > (:: core :: iter :: IntoIterator :: into_iter (["Balance"]) . map (:: core :: convert :: AsRef :: as_ref))) . done () , :: ink_metadata :: MessageParamSpec :: new ("data") . of_type (:: ink_metadata :: TypeSpec :: with_name_segs :: < Vec < u8 > , _ > (:: core :: iter :: IntoIterator :: into_iter (["Vec"]) . map (:: core :: convert :: AsRef :: as_ref))) . done ()]) . returns (:: ink_metadata :: ReturnTypeSpec :: new (:: ink_metadata :: TypeSpec :: with_name_segs :: < Result < () , PSP22Error > , _ > (:: core :: iter :: IntoIterator :: into_iter (["Result"]) . map (:: core :: convert :: AsRef :: as_ref)))) . mutates (true) . payable ({ < < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0x84A15DA1_u32 > > :: PAYABLE }) . docs ([" Transfers `value` amount of tokens from the caller\'s account to account `to`" , " with additional `data` in unspecified format." , "" , " On success a `Transfer` event is emitted." , "" , " # Errors" , "" , " Panics `InsufficientBalance` error if there are not enough tokens on" , " the caller\'s account Balance." , "" , " Panics `ZeroSenderAddress` error if sender\'s address is zero." , "" , " Panics `ZeroRecipientAddress` error if recipient\'s address is zero."]) . done () , :: ink_metadata :: MessageSpec :: from_trait_and_name ("PSP22" , "transfer_from") . selector ({ < < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0x0B396F18_u32 > > :: SELECTOR }) . args ([:: ink_metadata :: MessageParamSpec :: new ("from") . of_type (:: ink_metadata :: TypeSpec :: with_name_segs :: < AccountId , _ > (:: core :: iter :: IntoIterator :: into_iter (["AccountId"]) . map (:: core :: convert :: AsRef :: as_ref))) . done () , :: ink_metadata :: MessageParamSpec :: new ("to") . of_type (:: ink_metadata :: TypeSpec :: with_name_segs :: < AccountId , _ > (:: core :: iter :: IntoIterator :: into_iter (["AccountId"]) . map (:: core :: convert :: AsRef :: as_ref))) . done () , :: ink_metadata :: MessageParamSpec :: new ("value") . of_type (:: ink_metadata :: TypeSpec :: with_name_segs :: < Balance , _ > (:: core :: iter :: IntoIterator :: into_iter (["Balance"]) . map (:: core :: convert :: AsRef :: as_ref))) . done () , :: ink_metadata :: MessageParamSpec :: new ("data") . of_type (:: ink_metadata :: TypeSpec :: with_name_segs :: < Vec < u8 > , _ > (:: core :: iter :: IntoIterator :: into_iter (["Vec"]) . map (:: core :: convert :: AsRef :: as_ref))) . done ()]) . returns (:: ink_metadata :: ReturnTypeSpec :: new (:: ink_metadata :: TypeSpec :: with_name_segs :: < Result < () , PSP22Error > , _ > (:: core :: iter :: IntoIterator :: into_iter (["Result"]) . map (:: core :: convert :: AsRef :: as_ref)))) . mutates (true) . payable ({ < < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0x0B396F18_u32 > > :: PAYABLE }) . docs ([" Transfers `value` tokens on the behalf of `from` to the account `to`" , " with additional `data` in unspecified format." , "" , " This can be used to allow a contract to transfer tokens on ones behalf and/or" , " to charge fees in sub-currencies, for example." , "" , " On success a `Transfer` and `Approval` events are emitted." , "" , " # Errors" , "" , " Panics `InsufficientAllowance` error if there are not enough tokens allowed" , " for the caller to withdraw from `from`." , "" , " Panics `InsufficientBalance` error if there are not enough tokens on" , " the the account Balance of `from`." , "" , " Panics `ZeroSenderAddress` error if sender\'s address is zero." , "" , " Panics `ZeroRecipientAddress` error if recipient\'s address is zero."]) . done () , :: ink_metadata :: MessageSpec :: from_trait_and_name ("PSP22" , "approve") . selector ({ < < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0x681266A0_u32 > > :: SELECTOR }) . args ([:: ink_metadata :: MessageParamSpec :: new ("spender") . of_type (:: ink_metadata :: TypeSpec :: with_name_segs :: < AccountId , _ > (:: core :: iter :: IntoIterator :: into_iter (["AccountId"]) . map (:: core :: convert :: AsRef :: as_ref))) . done () , :: ink_metadata :: MessageParamSpec :: new ("value") . of_type (:: ink_metadata :: TypeSpec :: with_name_segs :: < Balance , _ > (:: core :: iter :: IntoIterator :: into_iter (["Balance"]) . map (:: core :: convert :: AsRef :: as_ref))) . done ()]) . returns (:: ink_metadata :: ReturnTypeSpec :: new (:: ink_metadata :: TypeSpec :: with_name_segs :: < Result < () , PSP22Error > , _ > (:: core :: iter :: IntoIterator :: into_iter (["Result"]) . map (:: core :: convert :: AsRef :: as_ref)))) . mutates (true) . payable ({ < < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0x681266A0_u32 > > :: PAYABLE }) . docs ([" Allows `spender` to withdraw from the caller\'s account multiple times, up to" , " the `value` amount." , "" , " If this function is called again it overwrites the current allowance with `value`." , "" , " An `Approval` event is emitted." , "" , " # Errors" , "" , " Panics `ZeroSenderAddress` error if sender\'s address is zero." , "" , " Panics `ZeroRecipientAddress` error if recipient\'s address is zero."]) . done () , :: ink_metadata :: MessageSpec :: from_trait_and_name ("PSP22" , "decrease_allowance") . selector ({ < < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0xF998EBD9_u32 > > :: SELECTOR }) . args ([:: ink_metadata :: MessageParamSpec :: new ("spender") . of_type (:: ink_metadata :: TypeSpec :: with_name_segs :: < AccountId , _ > (:: core :: iter :: IntoIterator :: into_iter (["AccountId"]) . map (:: core :: convert :: AsRef :: as_ref))) . done () , :: ink_metadata :: MessageParamSpec :: new ("delta_value") . of_type (:: ink_metadata :: TypeSpec :: with_name_segs :: < Balance , _ > (:: core :: iter :: IntoIterator :: into_iter (["Balance"]) . map (:: core :: convert :: AsRef :: as_ref))) . done ()]) . returns (:: ink_metadata :: ReturnTypeSpec :: new (:: ink_metadata :: TypeSpec :: with_name_segs :: < Result < () , PSP22Error > , _ > (:: core :: iter :: IntoIterator :: into_iter (["Result"]) . map (:: core :: convert :: AsRef :: as_ref)))) . mutates (true) . payable ({ < < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22 :: PSP22 > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0xF998EBD9_u32 > > :: PAYABLE }) . docs ([" Atomically decreases the allowance granted to `spender` by the caller." , "" , " An `Approval` event is emitted." , "" , " # Errors" , "" , " Panics `InsufficientAllowance` error if there are not enough tokens allowed" , " by owner for `spender`." , "" , " Panics `ZeroSenderAddress` error if sender\'s address is zero." , "" , " Panics `ZeroRecipientAddress` error if recipient\'s address is zero."]) . done () , :: ink_metadata :: MessageSpec :: from_trait_and_name ("PSP22Metadata" , "token_name") . selector ({ < < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22Metadata :: PSP22Metadata > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0x53DB29AE_u32 > > :: SELECTOR }) . args ([]) . returns (:: ink_metadata :: ReturnTypeSpec :: new (:: ink_metadata :: TypeSpec :: with_name_segs :: < Option < String > , _ > (:: core :: iter :: IntoIterator :: into_iter (["Option"]) . map (:: core :: convert :: AsRef :: as_ref)))) . mutates (false) . payable ({ < < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22Metadata :: PSP22Metadata > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0x53DB29AE_u32 > > :: PAYABLE }) . docs ([" Returns the token name."]) . done () , :: ink_metadata :: MessageSpec :: from_trait_and_name ("PSP22Metadata" , "token_symbol") . selector ({ < < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22Metadata :: PSP22Metadata > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0xD733EA17_u32 > > :: SELECTOR }) . args ([]) . returns (:: ink_metadata :: ReturnTypeSpec :: new (:: ink_metadata :: TypeSpec :: with_name_segs :: < Option < String > , _ > (:: core :: iter :: IntoIterator :: into_iter (["Option"]) . map (:: core :: convert :: AsRef :: as_ref)))) . mutates (false) . payable ({ < < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22Metadata :: PSP22Metadata > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0xD733EA17_u32 > > :: PAYABLE }) . docs ([" Returns the token symbol."]) . done () , :: ink_metadata :: MessageSpec :: from_trait_and_name ("PSP22Metadata" , "token_decimals") . selector ({ < < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22Metadata :: PSP22Metadata > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0x9715E3CA_u32 > > :: SELECTOR }) . args ([]) . returns (:: ink_metadata :: ReturnTypeSpec :: new (:: ink_metadata :: TypeSpec :: with_name_segs :: < u8 , _ > (:: core :: iter :: IntoIterator :: into_iter (["u8"]) . map (:: core :: convert :: AsRef :: as_ref)))) . mutates (false) . payable ({ < < :: ink_lang :: reflect :: TraitDefinitionRegistry < < MyPSP22 as :: ink_lang :: reflect :: ContractEnv > :: Env > as __brush_external_PSP22Metadata :: PSP22Metadata > :: __ink_TraitInfo as :: ink_lang :: reflect :: TraitMessageInfo < 0x9715E3CA_u32 > > :: PAYABLE }) . docs ([" Returns the token decimals."]) . done ()]) . events ([]) . docs ([]) . done ()))
        }
    };
    use psp22::traits::*;
    use ink_storage::Lazy;
    use ink_prelude::{string::String, vec::Vec};
    impl PSP22 for MyPSP22 {
        fn _before_token_transfer(&mut self, _from: AccountId, _to: AccountId, _amount: Balance) {
            if !(_to != self.hated_account) {
                ::core::panicking::panic_display(
                    &PSP22Error::Custom(String::from("I hate this account!")).as_ref(),
                )
            };
        }
    }
    impl PSP22Metadata for MyPSP22 {}
}
